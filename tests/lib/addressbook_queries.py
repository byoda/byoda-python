'''
Automatically generated code for GraphQL support for a Byoda service.
The code was generated by the 'generate_graphql_queries script'
using the 'podserver/files/grahphql_schema.jinja' template

:maintainer : Steven Hessing <steven@byoda.org>
:copyright  : Copyright 2021, 2022, 2023
:license    : GPLv3
'''

GRAPHQL_STATEMENTS = {}


QUERY_NETWORK_LINK = '''
query ($query_id: UUID!, $filters: networkLinkInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    network_link_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_link {
                created_timestamp
                member_id
                relation
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_link'] = {'query': QUERY_NETWORK_LINK}

MUTATE_NETWORK_LINK = '''
mutation(
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
) {
    mutate_network_link(
                    created_timestamp: $created_timestamp,
                    member_id: $member_id,
                    relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['network_link']['mutate'] = MUTATE_NETWORK_LINK


QUERY_NETWORK_INVITE = '''
query ($query_id: UUID!, $filters: networkInviteInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    network_invite_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_invite {
                created_timestamp
                member_id
                relation
                text
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_invite'] = {'query': QUERY_NETWORK_INVITE}

MUTATE_NETWORK_INVITE = '''
mutation(
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
                    $text: String,
) {
    mutate_network_invite(
                    created_timestamp: $created_timestamp,
                    member_id: $member_id,
                    relation: $relation,
                    text: $text,
    )
}
'''

GRAPHQL_STATEMENTS['network_invite']['mutate'] = MUTATE_NETWORK_INVITE


QUERY_NETWORK_LINK_INBOUND = '''
query ($query_id: UUID!, $filters: networkLinkInboundInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    network_link_inbound_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_link_inbound {
                created_timestamp
                member_id
                relation
                signature
                signature_expiration
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_link_inbound'] = {'query': QUERY_NETWORK_LINK_INBOUND}

MUTATE_NETWORK_LINK_INBOUND = '''
mutation(
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
                    $signature: String,
                    $signature_expiration: DateTime,
) {
    mutate_network_link_inbound(
                    created_timestamp: $created_timestamp,
                    member_id: $member_id,
                    relation: $relation,
                    signature: $signature,
                    signature_expiration: $signature_expiration,
    )
}
'''

GRAPHQL_STATEMENTS['network_link_inbound']['mutate'] = MUTATE_NETWORK_LINK_INBOUND


QUERY_ASSET_LINK = '''
query ($query_id: UUID!, $filters: assetLinkInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    asset_link_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset_link {
                created_timestamp
                member_id
                asset_id
                asset_url
                relation
                signature
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['asset_link'] = {'query': QUERY_ASSET_LINK}

MUTATE_ASSET_LINK = '''
mutation(
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $asset_id: UUID,
                    $asset_url: String,
                    $relation: String,
                    $signature: String,
) {
    mutate_asset_link(
                    created_timestamp: $created_timestamp,
                    member_id: $member_id,
                    asset_id: $asset_id,
                    asset_url: $asset_url,
                    relation: $relation,
                    signature: $signature,
    )
}
'''

GRAPHQL_STATEMENTS['asset_link']['mutate'] = MUTATE_ASSET_LINK


QUERY_ASSET_REACTION = '''
query ($query_id: UUID!, $filters: assetReactionInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    asset_reaction_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset_reaction {
                created_timestamp
                member_id
                asset_id
                asset_class
                relation
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['asset_reaction'] = {'query': QUERY_ASSET_REACTION}

MUTATE_ASSET_REACTION = '''
mutation(
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $asset_id: UUID,
                    $asset_class: UUID,
                    $relation: String,
) {
    mutate_asset_reaction(
                    created_timestamp: $created_timestamp,
                    member_id: $member_id,
                    asset_id: $asset_id,
                    asset_class: $asset_class,
                    relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['asset_reaction']['mutate'] = MUTATE_ASSET_REACTION


QUERY_DATALOG = '''
query ($query_id: UUID!, $filters: datalogInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    datalog_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            datalog {
                created_timestamp
                remote_addr
                remote_id
                remote_id_type
                origin_member_id
                origin_timestamp
                query_id
                origin_signature
                signature_format_version
                operation
                object
                query_filters
                query_depth
                query_relations
                query_remote_member_id
                source
                message
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['datalog'] = {'query': QUERY_DATALOG}

MUTATE_DATALOG = '''
mutation(
                    $created_timestamp: DateTime,
                    $remote_addr: String,
                    $remote_id: String,
                    $remote_id_type: String,
                    $origin_member_id: UUID,
                    $origin_timestamp: DateTime,
                    $query_id: UUID,
                    $origin_signature: String,
                    $signature_format_version: Float,
                    $operation: String,
                    $object: String,
                    $query_filters: String,
                    $query_depth: Int,
                    $query_relations: String,
                    $query_remote_member_id: UUID,
                    $source: String,
                    $message: String,
) {
    mutate_datalog(
                    created_timestamp: $created_timestamp,
                    remote_addr: $remote_addr,
                    remote_id: $remote_id,
                    remote_id_type: $remote_id_type,
                    origin_member_id: $origin_member_id,
                    origin_timestamp: $origin_timestamp,
                    query_id: $query_id,
                    origin_signature: $origin_signature,
                    signature_format_version: $signature_format_version,
                    operation: $operation,
                    object: $object,
                    query_filters: $query_filters,
                    query_depth: $query_depth,
                    query_relations: $query_relations,
                    query_remote_member_id: $query_remote_member_id,
                    source: $source,
                    message: $message,
    )
}
'''

GRAPHQL_STATEMENTS['datalog']['mutate'] = MUTATE_DATALOG


QUERY_ASSET = '''
query ($query_id: UUID!, $filters: assetInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    asset_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset {
                created_timestamp
                asset_id
                asset_type
                asset_url
                thumbnails
                locale
                creator
                published_timestamp
                content_warnings
                copyright_years
                publisher
                publisher_asset_id
                title
                subject
                contents
                keywords
                annotations
                forum
                root_asset_id
                root_asset_class
                response_to_asset_id
                encoding_status
                encoding_profiles
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['asset'] = {'query': QUERY_ASSET}

MUTATE_ASSET = '''
mutation(
                    $created_timestamp: DateTime,
                    $asset_id: UUID,
                    $asset_type: String,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    mutate_asset(
                    created_timestamp: $created_timestamp,
                    asset_id: $asset_id,
                    asset_type: $asset_type,
                    asset_url: $asset_url,
                    thumbnails: $thumbnails,
                    locale: $locale,
                    creator: $creator,
                    published_timestamp: $published_timestamp,
                    content_warnings: $content_warnings,
                    copyright_years: $copyright_years,
                    publisher: $publisher,
                    publisher_asset_id: $publisher_asset_id,
                    title: $title,
                    subject: $subject,
                    contents: $contents,
                    keywords: $keywords,
                    annotations: $annotations,
                    forum: $forum,
                    root_asset_id: $root_asset_id,
                    root_asset_class: $root_asset_class,
                    response_to_asset_id: $response_to_asset_id,
                    encoding_status: $encoding_status,
                    encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['asset']['mutate'] = MUTATE_ASSET


QUERY_TWITTER_ACCOUNT = '''
query ($query_id: UUID!, $filters: twitterAccountInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    twitter_account_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            twitter_account {
                twitter_id
                created_timestamp
                name
                url
                display_url
                pinned_tweet_id
                profile_image_url
                followers_count
                following_count
                tweet_count
                listed_count
                handle
                verified
                withheld
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['twitter_account'] = {'query': QUERY_TWITTER_ACCOUNT}

MUTATE_TWITTER_ACCOUNT = '''
mutation(
                    $twitter_id: String,
                    $created_timestamp: DateTime,
                    $name: String,
                    $url: String,
                    $display_url: String,
                    $pinned_tweet_id: String,
                    $profile_image_url: String,
                    $followers_count: Int,
                    $following_count: Int,
                    $tweet_count: Int,
                    $listed_count: Int,
                    $handle: String,
                    $verified: Boolean,
                    $withheld: String,
) {
    mutate_twitter_account(
                    twitter_id: $twitter_id,
                    created_timestamp: $created_timestamp,
                    name: $name,
                    url: $url,
                    display_url: $display_url,
                    pinned_tweet_id: $pinned_tweet_id,
                    profile_image_url: $profile_image_url,
                    followers_count: $followers_count,
                    following_count: $following_count,
                    tweet_count: $tweet_count,
                    listed_count: $listed_count,
                    handle: $handle,
                    verified: $verified,
                    withheld: $withheld,
    )
}
'''

GRAPHQL_STATEMENTS['twitter_account']['mutate'] = MUTATE_TWITTER_ACCOUNT


QUERY_TWITTER_MEDIA = '''
query ($query_id: UUID!, $filters: twitterMediaInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    twitter_media_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            twitter_media {
                created_timestamp
                height
                width
                alt_text
                duration
                media_key
                preview_image_url
                media_type
                view_count
                variants
                url
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['twitter_media'] = {'query': QUERY_TWITTER_MEDIA}

MUTATE_TWITTER_MEDIA = '''
mutation(
                    $created_timestamp: DateTime,
                    $height: Int,
                    $width: Int,
                    $alt_text: String,
                    $duration: Int,
                    $media_key: String,
                    $preview_image_url: String,
                    $media_type: String,
                    $view_count: Int,
                    $variants: [String!],
                    $url: String,
) {
    mutate_twitter_media(
                    created_timestamp: $created_timestamp,
                    height: $height,
                    width: $width,
                    alt_text: $alt_text,
                    duration: $duration,
                    media_key: $media_key,
                    preview_image_url: $preview_image_url,
                    media_type: $media_type,
                    view_count: $view_count,
                    variants: $variants,
                    url: $url,
    )
}
'''

GRAPHQL_STATEMENTS['twitter_media']['mutate'] = MUTATE_TWITTER_MEDIA


QUERY_TWEET = '''
query ($query_id: UUID!, $filters: tweetInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    tweet_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            tweet {
                created_timestamp
                asset_id
                lang
                creator
                contents
                response_to
                conversation_id
                geo
                retweet_count
                reply_count
                like_count
                quote_count
                mentions
                urls
                references
                media_ids
                hashtags
                assets
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['tweet'] = {'query': QUERY_TWEET}

MUTATE_TWEET = '''
mutation(
                    $created_timestamp: DateTime,
                    $asset_id: String,
                    $lang: String,
                    $creator: String,
                    $contents: String,
                    $response_to: String,
                    $conversation_id: String,
                    $geo: String,
                    $retweet_count: Int,
                    $reply_count: Int,
                    $like_count: Int,
                    $quote_count: Int,
                    $mentions: [String!],
                    $urls: [String!],
                    $references: [String!],
                    $media_ids: [String!],
                    $hashtags: [String!],
                    $assets: [String!],
) {
    mutate_tweet(
                    created_timestamp: $created_timestamp,
                    asset_id: $asset_id,
                    lang: $lang,
                    creator: $creator,
                    contents: $contents,
                    response_to: $response_to,
                    conversation_id: $conversation_id,
                    geo: $geo,
                    retweet_count: $retweet_count,
                    reply_count: $reply_count,
                    like_count: $like_count,
                    quote_count: $quote_count,
                    mentions: $mentions,
                    urls: $urls,
                    references: $references,
                    media_ids: $media_ids,
                    hashtags: $hashtags,
                    assets: $assets,
    )
}
'''

GRAPHQL_STATEMENTS['tweet']['mutate'] = MUTATE_TWEET


QUERY_MEMBER = '''
query ($query_id: UUID!, $filters: memberInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    member_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            member {
                joined
                member_id
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['member'] = {'query': QUERY_MEMBER}

MUTATE_MEMBER = '''
mutation(
                    $joined: DateTime,
                    $member_id: UUID,
) {
    mutate_member(
                    joined: $joined,
                    member_id: $member_id,
    )
}
'''

GRAPHQL_STATEMENTS['member']['mutate'] = MUTATE_MEMBER


QUERY_PERSON = '''
query ($query_id: UUID!, $filters: personInputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    person_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            person {
                additional_names
                avatar_url
                email
                family_name
                given_name
                homepage_url
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['person'] = {'query': QUERY_PERSON}

MUTATE_PERSON = '''
mutation(
                    $additional_names: String,
                    $avatar_url: String,
                    $email: String,
                    $family_name: String,
                    $given_name: String,
                    $homepage_url: String,
) {
    mutate_person(
                    additional_names: $additional_names,
                    avatar_url: $avatar_url,
                    email: $email,
                    family_name: $family_name,
                    given_name: $given_name,
                    homepage_url: $homepage_url,
    )
}
'''

GRAPHQL_STATEMENTS['person']['mutate'] = MUTATE_PERSON


QUERY_NETWORK_LINKS = '''
query ($query_id: UUID!, $filters: networkLinkInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    network_links_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_link {
                created_timestamp
                member_id
                relation
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_links'] = {'query': QUERY_NETWORK_LINKS}

APPEND_NETWORK_LINKS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $member_id: UUID!,
                    $relation: String!,
) {
    append_network_links (
            created_timestamp: $created_timestamp,
            member_id: $member_id,
            relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['network_links']['append'] = APPEND_NETWORK_LINKS

UPDATE_NETWORK_LINKS = '''
mutation (
    $filters: networkLinkInputFilter!,
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
) {
    update_network_links(
        filters: $filters,
        created_timestamp: $created_timestamp,
        member_id: $member_id,
        relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['network_links']['update'] = UPDATE_NETWORK_LINKS

DELETE_FROM_NETWORK_LINKS = '''
mutation ($filters: networkLinkInputFilter!) {
    delete_from_network_links(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['network_links']['delete'] = DELETE_FROM_NETWORK_LINKS

SUBSCRIPTION_NETWORK_LINKS_UPDATES = '''
subscription (
    $filters: networkLinkInputFilter) {
    network_links_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            member_id
            relation
        }
    }
}
'''
GRAPHQL_STATEMENTS['network_links']['updates'] = SUBSCRIPTION_NETWORK_LINKS_UPDATES

SUBSCRIPTION_NETWORK_LINKS_COUNTER = '''
subscription (
    $filter: networkLinksCounterFilter) {
    network_links_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['network_links']['counter'] = SUBSCRIPTION_NETWORK_LINKS_COUNTER


QUERY_NETWORK_INVITES = '''
query ($query_id: UUID!, $filters: networkInviteInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    network_invites_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_invite {
                created_timestamp
                member_id
                relation
                text
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_invites'] = {'query': QUERY_NETWORK_INVITES}

APPEND_NETWORK_INVITES = '''
mutation (
                    $created_timestamp: DateTime!,
                    $member_id: UUID!,
                    $relation: String!,
                    $text: String,
) {
    append_network_invites (
            created_timestamp: $created_timestamp,
            member_id: $member_id,
            relation: $relation,
            text: $text,
    )
}
'''

GRAPHQL_STATEMENTS['network_invites']['append'] = APPEND_NETWORK_INVITES

UPDATE_NETWORK_INVITES = '''
mutation (
    $filters: networkInviteInputFilter!,
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
                    $text: String,
) {
    update_network_invites(
        filters: $filters,
        created_timestamp: $created_timestamp,
        member_id: $member_id,
        relation: $relation,
        text: $text,
    )
}
'''

GRAPHQL_STATEMENTS['network_invites']['update'] = UPDATE_NETWORK_INVITES

DELETE_FROM_NETWORK_INVITES = '''
mutation ($filters: networkInviteInputFilter!) {
    delete_from_network_invites(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['network_invites']['delete'] = DELETE_FROM_NETWORK_INVITES

SUBSCRIPTION_NETWORK_INVITES_UPDATES = '''
subscription (
    $filters: networkInviteInputFilter) {
    network_invites_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            member_id
            relation
            text
        }
    }
}
'''
GRAPHQL_STATEMENTS['network_invites']['updates'] = SUBSCRIPTION_NETWORK_INVITES_UPDATES

SUBSCRIPTION_NETWORK_INVITES_COUNTER = '''
subscription (
    $filter: networkInvitesCounterFilter) {
    network_invites_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['network_invites']['counter'] = SUBSCRIPTION_NETWORK_INVITES_COUNTER


QUERY_NETWORK_LINKS_INBOUND = '''
query ($query_id: UUID!, $filters: networkLinkInboundInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    network_links_inbound_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            network_link_inbound {
                created_timestamp
                member_id
                relation
                signature
                signature_expiration
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_links_inbound'] = {'query': QUERY_NETWORK_LINKS_INBOUND}

APPEND_NETWORK_LINKS_INBOUND = '''
mutation (
                    $created_timestamp: DateTime!,
                    $member_id: UUID!,
                    $relation: String!,
                    $signature: String,
                    $signature_expiration: DateTime,
) {
    append_network_links_inbound (
            created_timestamp: $created_timestamp,
            member_id: $member_id,
            relation: $relation,
            signature: $signature,
            signature_expiration: $signature_expiration,
    )
}
'''

GRAPHQL_STATEMENTS['network_links_inbound']['append'] = APPEND_NETWORK_LINKS_INBOUND

UPDATE_NETWORK_LINKS_INBOUND = '''
mutation (
    $filters: networkLinkInboundInputFilter!,
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $relation: String,
                    $signature: String,
                    $signature_expiration: DateTime,
) {
    update_network_links_inbound(
        filters: $filters,
        created_timestamp: $created_timestamp,
        member_id: $member_id,
        relation: $relation,
        signature: $signature,
        signature_expiration: $signature_expiration,
    )
}
'''

GRAPHQL_STATEMENTS['network_links_inbound']['update'] = UPDATE_NETWORK_LINKS_INBOUND

DELETE_FROM_NETWORK_LINKS_INBOUND = '''
mutation ($filters: networkLinkInboundInputFilter!) {
    delete_from_network_links_inbound(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['network_links_inbound']['delete'] = DELETE_FROM_NETWORK_LINKS_INBOUND

SUBSCRIPTION_NETWORK_LINKS_INBOUND_UPDATES = '''
subscription (
    $filters: networkLinkInboundInputFilter) {
    network_links_inbound_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            member_id
            relation
            signature
            signature_expiration
        }
    }
}
'''
GRAPHQL_STATEMENTS['network_links_inbound']['updates'] = SUBSCRIPTION_NETWORK_LINKS_INBOUND_UPDATES

SUBSCRIPTION_NETWORK_LINKS_INBOUND_COUNTER = '''
subscription (
    $filter: networkLinksInboundCounterFilter) {
    network_links_inbound_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['network_links_inbound']['counter'] = SUBSCRIPTION_NETWORK_LINKS_INBOUND_COUNTER


QUERY_ASSET_LINKS = '''
query ($query_id: UUID!, $filters: assetLinkInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    asset_links_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset_link {
                created_timestamp
                member_id
                asset_id
                asset_url
                relation
                signature
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['asset_links'] = {'query': QUERY_ASSET_LINKS}

APPEND_ASSET_LINKS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $member_id: UUID!,
                    $asset_id: UUID,
                    $asset_url: String,
                    $relation: String!,
                    $signature: String,
) {
    append_asset_links (
            created_timestamp: $created_timestamp,
            member_id: $member_id,
            asset_id: $asset_id,
            asset_url: $asset_url,
            relation: $relation,
            signature: $signature,
    )
}
'''

GRAPHQL_STATEMENTS['asset_links']['append'] = APPEND_ASSET_LINKS

UPDATE_ASSET_LINKS = '''
mutation (
    $filters: assetLinkInputFilter!,
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $asset_id: UUID,
                    $asset_url: String,
                    $relation: String,
                    $signature: String,
) {
    update_asset_links(
        filters: $filters,
        created_timestamp: $created_timestamp,
        member_id: $member_id,
        asset_id: $asset_id,
        asset_url: $asset_url,
        relation: $relation,
        signature: $signature,
    )
}
'''

GRAPHQL_STATEMENTS['asset_links']['update'] = UPDATE_ASSET_LINKS

DELETE_FROM_ASSET_LINKS = '''
mutation ($filters: assetLinkInputFilter!) {
    delete_from_asset_links(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['asset_links']['delete'] = DELETE_FROM_ASSET_LINKS

SUBSCRIPTION_ASSET_LINKS_UPDATES = '''
subscription (
    $filters: assetLinkInputFilter) {
    asset_links_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            member_id
            asset_id
            asset_url
            relation
            signature
        }
    }
}
'''
GRAPHQL_STATEMENTS['asset_links']['updates'] = SUBSCRIPTION_ASSET_LINKS_UPDATES

SUBSCRIPTION_ASSET_LINKS_COUNTER = '''
subscription (
    $filter: assetLinksCounterFilter) {
    asset_links_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['asset_links']['counter'] = SUBSCRIPTION_ASSET_LINKS_COUNTER


QUERY_ASSET_REACTIONS_RECEIVED = '''
query ($query_id: UUID!, $filters: assetReactionInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    asset_reactions_received_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset_reaction {
                created_timestamp
                member_id
                asset_id
                asset_class
                relation
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['asset_reactions_received'] = {'query': QUERY_ASSET_REACTIONS_RECEIVED}

APPEND_ASSET_REACTIONS_RECEIVED = '''
mutation (
                    $created_timestamp: DateTime!,
                    $member_id: UUID!,
                    $asset_id: UUID!,
                    $asset_class: UUID,
                    $relation: String!,
) {
    append_asset_reactions_received (
            created_timestamp: $created_timestamp,
            member_id: $member_id,
            asset_id: $asset_id,
            asset_class: $asset_class,
            relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['asset_reactions_received']['append'] = APPEND_ASSET_REACTIONS_RECEIVED

UPDATE_ASSET_REACTIONS_RECEIVED = '''
mutation (
    $filters: assetReactionInputFilter!,
                    $created_timestamp: DateTime,
                    $member_id: UUID,
                    $asset_id: UUID,
                    $asset_class: UUID,
                    $relation: String,
) {
    update_asset_reactions_received(
        filters: $filters,
        created_timestamp: $created_timestamp,
        member_id: $member_id,
        asset_id: $asset_id,
        asset_class: $asset_class,
        relation: $relation,
    )
}
'''

GRAPHQL_STATEMENTS['asset_reactions_received']['update'] = UPDATE_ASSET_REACTIONS_RECEIVED

DELETE_FROM_ASSET_REACTIONS_RECEIVED = '''
mutation ($filters: assetReactionInputFilter!) {
    delete_from_asset_reactions_received(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['asset_reactions_received']['delete'] = DELETE_FROM_ASSET_REACTIONS_RECEIVED

SUBSCRIPTION_ASSET_REACTIONS_RECEIVED_UPDATES = '''
subscription (
    $filters: assetReactionInputFilter) {
    asset_reactions_received_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            member_id
            asset_id
            asset_class
            relation
        }
    }
}
'''
GRAPHQL_STATEMENTS['asset_reactions_received']['updates'] = SUBSCRIPTION_ASSET_REACTIONS_RECEIVED_UPDATES

SUBSCRIPTION_ASSET_REACTIONS_RECEIVED_COUNTER = '''
subscription (
    $filter: assetReactionsReceivedCounterFilter) {
    asset_reactions_received_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['asset_reactions_received']['counter'] = SUBSCRIPTION_ASSET_REACTIONS_RECEIVED_COUNTER


QUERY_DATALOGS = '''
query ($query_id: UUID!, $filters: datalogInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    datalogs_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            datalog {
                created_timestamp
                remote_addr
                remote_id
                remote_id_type
                origin_member_id
                origin_timestamp
                query_id
                origin_signature
                signature_format_version
                operation
                object
                query_filters
                query_depth
                query_relations
                query_remote_member_id
                source
                message
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['datalogs'] = {'query': QUERY_DATALOGS}

APPEND_DATALOGS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $remote_addr: String!,
                    $remote_id: String,
                    $remote_id_type: String,
                    $origin_member_id: UUID,
                    $origin_timestamp: DateTime,
                    $query_id: UUID,
                    $origin_signature: String,
                    $signature_format_version: Float,
                    $operation: String!,
                    $object: String!,
                    $query_filters: String,
                    $query_depth: Int,
                    $query_relations: String,
                    $query_remote_member_id: UUID,
                    $source: String,
                    $message: String,
) {
    append_datalogs (
            created_timestamp: $created_timestamp,
            remote_addr: $remote_addr,
            remote_id: $remote_id,
            remote_id_type: $remote_id_type,
            origin_member_id: $origin_member_id,
            origin_timestamp: $origin_timestamp,
            query_id: $query_id,
            origin_signature: $origin_signature,
            signature_format_version: $signature_format_version,
            operation: $operation,
            object: $object,
            query_filters: $query_filters,
            query_depth: $query_depth,
            query_relations: $query_relations,
            query_remote_member_id: $query_remote_member_id,
            source: $source,
            message: $message,
    )
}
'''

GRAPHQL_STATEMENTS['datalogs']['append'] = APPEND_DATALOGS

UPDATE_DATALOGS = '''
mutation (
    $filters: datalogInputFilter!,
                    $created_timestamp: DateTime,
                    $remote_addr: String,
                    $remote_id: String,
                    $remote_id_type: String,
                    $origin_member_id: UUID,
                    $origin_timestamp: DateTime,
                    $query_id: UUID,
                    $origin_signature: String,
                    $signature_format_version: Float,
                    $operation: String,
                    $object: String,
                    $query_filters: String,
                    $query_depth: Int,
                    $query_relations: String,
                    $query_remote_member_id: UUID,
                    $source: String,
                    $message: String,
) {
    update_datalogs(
        filters: $filters,
        created_timestamp: $created_timestamp,
        remote_addr: $remote_addr,
        remote_id: $remote_id,
        remote_id_type: $remote_id_type,
        origin_member_id: $origin_member_id,
        origin_timestamp: $origin_timestamp,
        query_id: $query_id,
        origin_signature: $origin_signature,
        signature_format_version: $signature_format_version,
        operation: $operation,
        object: $object,
        query_filters: $query_filters,
        query_depth: $query_depth,
        query_relations: $query_relations,
        query_remote_member_id: $query_remote_member_id,
        source: $source,
        message: $message,
    )
}
'''

GRAPHQL_STATEMENTS['datalogs']['update'] = UPDATE_DATALOGS

DELETE_FROM_DATALOGS = '''
mutation ($filters: datalogInputFilter!) {
    delete_from_datalogs(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['datalogs']['delete'] = DELETE_FROM_DATALOGS

SUBSCRIPTION_DATALOGS_UPDATES = '''
subscription (
    $filters: datalogInputFilter) {
    datalogs_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            remote_addr
            remote_id
            remote_id_type
            origin_member_id
            origin_timestamp
            query_id
            origin_signature
            signature_format_version
            operation
            object
            query_filters
            query_depth
            query_relations
            query_remote_member_id
            source
            message
        }
    }
}
'''
GRAPHQL_STATEMENTS['datalogs']['updates'] = SUBSCRIPTION_DATALOGS_UPDATES

SUBSCRIPTION_DATALOGS_COUNTER = '''
subscription (
    $filter: datalogsCounterFilter) {
    datalogs_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['datalogs']['counter'] = SUBSCRIPTION_DATALOGS_COUNTER


QUERY_PUBLIC_ASSETS = '''
query ($query_id: UUID!, $filters: assetInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    public_assets_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset {
                created_timestamp
                asset_id
                asset_type
                asset_url
                thumbnails
                locale
                creator
                published_timestamp
                content_warnings
                copyright_years
                publisher
                publisher_asset_id
                title
                subject
                contents
                keywords
                annotations
                forum
                root_asset_id
                root_asset_class
                response_to_asset_id
                encoding_status
                encoding_profiles
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['public_assets'] = {'query': QUERY_PUBLIC_ASSETS}

APPEND_PUBLIC_ASSETS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $asset_id: UUID!,
                    $asset_type: String!,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    append_public_assets (
            created_timestamp: $created_timestamp,
            asset_id: $asset_id,
            asset_type: $asset_type,
            asset_url: $asset_url,
            thumbnails: $thumbnails,
            locale: $locale,
            creator: $creator,
            published_timestamp: $published_timestamp,
            content_warnings: $content_warnings,
            copyright_years: $copyright_years,
            publisher: $publisher,
            publisher_asset_id: $publisher_asset_id,
            title: $title,
            subject: $subject,
            contents: $contents,
            keywords: $keywords,
            annotations: $annotations,
            forum: $forum,
            root_asset_id: $root_asset_id,
            root_asset_class: $root_asset_class,
            response_to_asset_id: $response_to_asset_id,
            encoding_status: $encoding_status,
            encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['public_assets']['append'] = APPEND_PUBLIC_ASSETS

UPDATE_PUBLIC_ASSETS = '''
mutation (
    $filters: assetInputFilter!,
                    $created_timestamp: DateTime,
                    $asset_id: UUID,
                    $asset_type: String,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    update_public_assets(
        filters: $filters,
        created_timestamp: $created_timestamp,
        asset_id: $asset_id,
        asset_type: $asset_type,
        asset_url: $asset_url,
        thumbnails: $thumbnails,
        locale: $locale,
        creator: $creator,
        published_timestamp: $published_timestamp,
        content_warnings: $content_warnings,
        copyright_years: $copyright_years,
        publisher: $publisher,
        publisher_asset_id: $publisher_asset_id,
        title: $title,
        subject: $subject,
        contents: $contents,
        keywords: $keywords,
        annotations: $annotations,
        forum: $forum,
        root_asset_id: $root_asset_id,
        root_asset_class: $root_asset_class,
        response_to_asset_id: $response_to_asset_id,
        encoding_status: $encoding_status,
        encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['public_assets']['update'] = UPDATE_PUBLIC_ASSETS

DELETE_FROM_PUBLIC_ASSETS = '''
mutation ($filters: assetInputFilter!) {
    delete_from_public_assets(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['public_assets']['delete'] = DELETE_FROM_PUBLIC_ASSETS

SUBSCRIPTION_PUBLIC_ASSETS_UPDATES = '''
subscription (
    $filters: assetInputFilter) {
    public_assets_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            asset_id
            asset_type
            asset_url
            thumbnails
            locale
            creator
            published_timestamp
            content_warnings
            copyright_years
            publisher
            publisher_asset_id
            title
            subject
            contents
            keywords
            annotations
            forum
            root_asset_id
            root_asset_class
            response_to_asset_id
            encoding_status
            encoding_profiles
        }
    }
}
'''
GRAPHQL_STATEMENTS['public_assets']['updates'] = SUBSCRIPTION_PUBLIC_ASSETS_UPDATES

SUBSCRIPTION_PUBLIC_ASSETS_COUNTER = '''
subscription (
    $filter: publicAssetsCounterFilter) {
    public_assets_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['public_assets']['counter'] = SUBSCRIPTION_PUBLIC_ASSETS_COUNTER


QUERY_SERVICE_ASSETS = '''
query ($query_id: UUID!, $filters: assetInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    service_assets_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset {
                created_timestamp
                asset_id
                asset_type
                asset_url
                thumbnails
                locale
                creator
                published_timestamp
                content_warnings
                copyright_years
                publisher
                publisher_asset_id
                title
                subject
                contents
                keywords
                annotations
                forum
                root_asset_id
                root_asset_class
                response_to_asset_id
                encoding_status
                encoding_profiles
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['service_assets'] = {'query': QUERY_SERVICE_ASSETS}

APPEND_SERVICE_ASSETS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $asset_id: UUID!,
                    $asset_type: String!,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    append_service_assets (
            created_timestamp: $created_timestamp,
            asset_id: $asset_id,
            asset_type: $asset_type,
            asset_url: $asset_url,
            thumbnails: $thumbnails,
            locale: $locale,
            creator: $creator,
            published_timestamp: $published_timestamp,
            content_warnings: $content_warnings,
            copyright_years: $copyright_years,
            publisher: $publisher,
            publisher_asset_id: $publisher_asset_id,
            title: $title,
            subject: $subject,
            contents: $contents,
            keywords: $keywords,
            annotations: $annotations,
            forum: $forum,
            root_asset_id: $root_asset_id,
            root_asset_class: $root_asset_class,
            response_to_asset_id: $response_to_asset_id,
            encoding_status: $encoding_status,
            encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['service_assets']['append'] = APPEND_SERVICE_ASSETS

UPDATE_SERVICE_ASSETS = '''
mutation (
    $filters: assetInputFilter!,
                    $created_timestamp: DateTime,
                    $asset_id: UUID,
                    $asset_type: String,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    update_service_assets(
        filters: $filters,
        created_timestamp: $created_timestamp,
        asset_id: $asset_id,
        asset_type: $asset_type,
        asset_url: $asset_url,
        thumbnails: $thumbnails,
        locale: $locale,
        creator: $creator,
        published_timestamp: $published_timestamp,
        content_warnings: $content_warnings,
        copyright_years: $copyright_years,
        publisher: $publisher,
        publisher_asset_id: $publisher_asset_id,
        title: $title,
        subject: $subject,
        contents: $contents,
        keywords: $keywords,
        annotations: $annotations,
        forum: $forum,
        root_asset_id: $root_asset_id,
        root_asset_class: $root_asset_class,
        response_to_asset_id: $response_to_asset_id,
        encoding_status: $encoding_status,
        encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['service_assets']['update'] = UPDATE_SERVICE_ASSETS

DELETE_FROM_SERVICE_ASSETS = '''
mutation ($filters: assetInputFilter!) {
    delete_from_service_assets(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['service_assets']['delete'] = DELETE_FROM_SERVICE_ASSETS

SUBSCRIPTION_SERVICE_ASSETS_UPDATES = '''
subscription (
    $filters: assetInputFilter) {
    service_assets_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            asset_id
            asset_type
            asset_url
            thumbnails
            locale
            creator
            published_timestamp
            content_warnings
            copyright_years
            publisher
            publisher_asset_id
            title
            subject
            contents
            keywords
            annotations
            forum
            root_asset_id
            root_asset_class
            response_to_asset_id
            encoding_status
            encoding_profiles
        }
    }
}
'''
GRAPHQL_STATEMENTS['service_assets']['updates'] = SUBSCRIPTION_SERVICE_ASSETS_UPDATES

SUBSCRIPTION_SERVICE_ASSETS_COUNTER = '''
subscription (
    $filter: serviceAssetsCounterFilter) {
    service_assets_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['service_assets']['counter'] = SUBSCRIPTION_SERVICE_ASSETS_COUNTER


QUERY_NETWORK_ASSETS = '''
query ($query_id: UUID!, $filters: assetInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    network_assets_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            asset {
                created_timestamp
                asset_id
                asset_type
                asset_url
                thumbnails
                locale
                creator
                published_timestamp
                content_warnings
                copyright_years
                publisher
                publisher_asset_id
                title
                subject
                contents
                keywords
                annotations
                forum
                root_asset_id
                root_asset_class
                response_to_asset_id
                encoding_status
                encoding_profiles
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['network_assets'] = {'query': QUERY_NETWORK_ASSETS}

APPEND_NETWORK_ASSETS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $asset_id: UUID!,
                    $asset_type: String!,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    append_network_assets (
            created_timestamp: $created_timestamp,
            asset_id: $asset_id,
            asset_type: $asset_type,
            asset_url: $asset_url,
            thumbnails: $thumbnails,
            locale: $locale,
            creator: $creator,
            published_timestamp: $published_timestamp,
            content_warnings: $content_warnings,
            copyright_years: $copyright_years,
            publisher: $publisher,
            publisher_asset_id: $publisher_asset_id,
            title: $title,
            subject: $subject,
            contents: $contents,
            keywords: $keywords,
            annotations: $annotations,
            forum: $forum,
            root_asset_id: $root_asset_id,
            root_asset_class: $root_asset_class,
            response_to_asset_id: $response_to_asset_id,
            encoding_status: $encoding_status,
            encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['network_assets']['append'] = APPEND_NETWORK_ASSETS

UPDATE_NETWORK_ASSETS = '''
mutation (
    $filters: assetInputFilter!,
                    $created_timestamp: DateTime,
                    $asset_id: UUID,
                    $asset_type: String,
                    $asset_url: String,
                    $thumbnails: [String!],
                    $locale: String,
                    $creator: String,
                    $published_timestamp: DateTime,
                    $content_warnings: [String!],
                    $copyright_years: [Int!],
                    $publisher: String,
                    $publisher_asset_id: String,
                    $title: String,
                    $subject: String,
                    $contents: String,
                    $keywords: [String!],
                    $annotations: [String!],
                    $forum: String,
                    $root_asset_id: UUID,
                    $root_asset_class: String,
                    $response_to_asset_id: UUID,
                    $encoding_status: String,
                    $encoding_profiles: [String!],
) {
    update_network_assets(
        filters: $filters,
        created_timestamp: $created_timestamp,
        asset_id: $asset_id,
        asset_type: $asset_type,
        asset_url: $asset_url,
        thumbnails: $thumbnails,
        locale: $locale,
        creator: $creator,
        published_timestamp: $published_timestamp,
        content_warnings: $content_warnings,
        copyright_years: $copyright_years,
        publisher: $publisher,
        publisher_asset_id: $publisher_asset_id,
        title: $title,
        subject: $subject,
        contents: $contents,
        keywords: $keywords,
        annotations: $annotations,
        forum: $forum,
        root_asset_id: $root_asset_id,
        root_asset_class: $root_asset_class,
        response_to_asset_id: $response_to_asset_id,
        encoding_status: $encoding_status,
        encoding_profiles: $encoding_profiles,
    )
}
'''

GRAPHQL_STATEMENTS['network_assets']['update'] = UPDATE_NETWORK_ASSETS

DELETE_FROM_NETWORK_ASSETS = '''
mutation ($filters: assetInputFilter!) {
    delete_from_network_assets(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['network_assets']['delete'] = DELETE_FROM_NETWORK_ASSETS

SUBSCRIPTION_NETWORK_ASSETS_UPDATES = '''
subscription (
    $filters: assetInputFilter) {
    network_assets_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            asset_id
            asset_type
            asset_url
            thumbnails
            locale
            creator
            published_timestamp
            content_warnings
            copyright_years
            publisher
            publisher_asset_id
            title
            subject
            contents
            keywords
            annotations
            forum
            root_asset_id
            root_asset_class
            response_to_asset_id
            encoding_status
            encoding_profiles
        }
    }
}
'''
GRAPHQL_STATEMENTS['network_assets']['updates'] = SUBSCRIPTION_NETWORK_ASSETS_UPDATES

SUBSCRIPTION_NETWORK_ASSETS_COUNTER = '''
subscription (
    $filter: networkAssetsCounterFilter) {
    network_assets_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['network_assets']['counter'] = SUBSCRIPTION_NETWORK_ASSETS_COUNTER


QUERY_TWITTER_MEDIAS = '''
query ($query_id: UUID!, $filters: twitterMediaInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    twitter_medias_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            twitter_media {
                created_timestamp
                height
                width
                alt_text
                duration
                media_key
                preview_image_url
                media_type
                view_count
                variants
                url
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['twitter_medias'] = {'query': QUERY_TWITTER_MEDIAS}

APPEND_TWITTER_MEDIAS = '''
mutation (
                    $created_timestamp: DateTime,
                    $height: Int,
                    $width: Int,
                    $alt_text: String,
                    $duration: Int,
                    $media_key: String!,
                    $preview_image_url: String,
                    $media_type: String,
                    $view_count: Int,
                    $variants: [String!],
                    $url: String,
) {
    append_twitter_medias (
            created_timestamp: $created_timestamp,
            height: $height,
            width: $width,
            alt_text: $alt_text,
            duration: $duration,
            media_key: $media_key,
            preview_image_url: $preview_image_url,
            media_type: $media_type,
            view_count: $view_count,
            variants: $variants,
            url: $url,
    )
}
'''

GRAPHQL_STATEMENTS['twitter_medias']['append'] = APPEND_TWITTER_MEDIAS

UPDATE_TWITTER_MEDIAS = '''
mutation (
    $filters: twitterMediaInputFilter!,
                    $created_timestamp: DateTime,
                    $height: Int,
                    $width: Int,
                    $alt_text: String,
                    $duration: Int,
                    $media_key: String,
                    $preview_image_url: String,
                    $media_type: String,
                    $view_count: Int,
                    $variants: [String!],
                    $url: String,
) {
    update_twitter_medias(
        filters: $filters,
        created_timestamp: $created_timestamp,
        height: $height,
        width: $width,
        alt_text: $alt_text,
        duration: $duration,
        media_key: $media_key,
        preview_image_url: $preview_image_url,
        media_type: $media_type,
        view_count: $view_count,
        variants: $variants,
        url: $url,
    )
}
'''

GRAPHQL_STATEMENTS['twitter_medias']['update'] = UPDATE_TWITTER_MEDIAS

DELETE_FROM_TWITTER_MEDIAS = '''
mutation ($filters: twitterMediaInputFilter!) {
    delete_from_twitter_medias(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['twitter_medias']['delete'] = DELETE_FROM_TWITTER_MEDIAS

SUBSCRIPTION_TWITTER_MEDIAS_UPDATES = '''
subscription (
    $filters: twitterMediaInputFilter) {
    twitter_medias_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            height
            width
            alt_text
            duration
            media_key
            preview_image_url
            media_type
            view_count
            variants
            url
        }
    }
}
'''
GRAPHQL_STATEMENTS['twitter_medias']['updates'] = SUBSCRIPTION_TWITTER_MEDIAS_UPDATES

SUBSCRIPTION_TWITTER_MEDIAS_COUNTER = '''
subscription (
    $filter: twitterMediasCounterFilter) {
    twitter_medias_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['twitter_medias']['counter'] = SUBSCRIPTION_TWITTER_MEDIAS_COUNTER


QUERY_TWEETS = '''
query ($query_id: UUID!, $filters: tweetInputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    tweets_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            tweet {
                created_timestamp
                asset_id
                lang
                creator
                contents
                response_to
                conversation_id
                geo
                retweet_count
                reply_count
                like_count
                quote_count
                mentions
                urls
                references
                media_ids
                hashtags
                assets
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['tweets'] = {'query': QUERY_TWEETS}

APPEND_TWEETS = '''
mutation (
                    $created_timestamp: DateTime!,
                    $asset_id: String!,
                    $lang: String,
                    $creator: String,
                    $contents: String!,
                    $response_to: String,
                    $conversation_id: String,
                    $geo: String,
                    $retweet_count: Int,
                    $reply_count: Int,
                    $like_count: Int,
                    $quote_count: Int,
                    $mentions: [String!],
                    $urls: [String!],
                    $references: [String!],
                    $media_ids: [String!],
                    $hashtags: [String!],
                    $assets: [String!],
) {
    append_tweets (
            created_timestamp: $created_timestamp,
            asset_id: $asset_id,
            lang: $lang,
            creator: $creator,
            contents: $contents,
            response_to: $response_to,
            conversation_id: $conversation_id,
            geo: $geo,
            retweet_count: $retweet_count,
            reply_count: $reply_count,
            like_count: $like_count,
            quote_count: $quote_count,
            mentions: $mentions,
            urls: $urls,
            references: $references,
            media_ids: $media_ids,
            hashtags: $hashtags,
            assets: $assets,
    )
}
'''

GRAPHQL_STATEMENTS['tweets']['append'] = APPEND_TWEETS

UPDATE_TWEETS = '''
mutation (
    $filters: tweetInputFilter!,
                    $created_timestamp: DateTime,
                    $asset_id: String,
                    $lang: String,
                    $creator: String,
                    $contents: String,
                    $response_to: String,
                    $conversation_id: String,
                    $geo: String,
                    $retweet_count: Int,
                    $reply_count: Int,
                    $like_count: Int,
                    $quote_count: Int,
                    $mentions: [String!],
                    $urls: [String!],
                    $references: [String!],
                    $media_ids: [String!],
                    $hashtags: [String!],
                    $assets: [String!],
) {
    update_tweets(
        filters: $filters,
        created_timestamp: $created_timestamp,
        asset_id: $asset_id,
        lang: $lang,
        creator: $creator,
        contents: $contents,
        response_to: $response_to,
        conversation_id: $conversation_id,
        geo: $geo,
        retweet_count: $retweet_count,
        reply_count: $reply_count,
        like_count: $like_count,
        quote_count: $quote_count,
        mentions: $mentions,
        urls: $urls,
        references: $references,
        media_ids: $media_ids,
        hashtags: $hashtags,
        assets: $assets,
    )
}
'''

GRAPHQL_STATEMENTS['tweets']['update'] = UPDATE_TWEETS

DELETE_FROM_TWEETS = '''
mutation ($filters: tweetInputFilter!) {
    delete_from_tweets(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['tweets']['delete'] = DELETE_FROM_TWEETS

SUBSCRIPTION_TWEETS_UPDATES = '''
subscription (
    $filters: tweetInputFilter) {
    tweets_updates(filters: $filters) {
        action
        class_name
        data {
            created_timestamp
            asset_id
            lang
            creator
            contents
            response_to
            conversation_id
            geo
            retweet_count
            reply_count
            like_count
            quote_count
            mentions
            urls
            references
            media_ids
            hashtags
            assets
        }
    }
}
'''
GRAPHQL_STATEMENTS['tweets']['updates'] = SUBSCRIPTION_TWEETS_UPDATES

SUBSCRIPTION_TWEETS_COUNTER = '''
subscription (
    $filter: tweetsCounterFilter) {
    tweets_counter(filter: $filter) {
        class_name
        data
    }
}
'''
GRAPHQL_STATEMENTS['tweets']['counter'] = SUBSCRIPTION_TWEETS_COUNTER

