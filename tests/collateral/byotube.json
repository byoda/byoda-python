{
    "description": "Bring your own tube",
    "jsonschema": {
        "$id": "https://service.service-16384.byoda.net/service/byotube",
        "$schema": "https://json-schema.org/draft/2020-12/schema#",
        "description": "The schema for the byotube service",
        "properties": {
            "member": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update"]
                    }
                },
                "properties": {
                    "joined": {
                        "description": "Date & time when the pod became a member of the service",
                        "format": "date-time",
                        "type": "string"
                    },
                    "member_id": {
                        "#accesscontrol": {
                            "service": {
                                "permissions": ["persist"]
                            },
                            "any_member": {
                                "permissions": ["persist"]
                            }
                        },
                        "description": "Membership UUID",
                        "format": "uuid",
                        "type": "string"
                    },
                    "schema_versions": {
                        "#accesscontrol": {
                            "service": {
                                "permissions": ["persist"]
                            },
                            "any_member": {
                                "permissions": ["read"]
                            }
                        },
                        "description": "All the versions of the schema supported by the pod",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "auto_upgrade": {
                        "description": "Should the pod automatically upgrade to the latest schema version available?",
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": ["joined", "member_id"]
            },
            "network_links": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/network_link"
                }
            },
            "network_invites": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "any_member": {
                        "permissions": ["append"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/network_invite"
                }
            },
            "network_links_inbound": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "any_member": {
                        "permissions": ["read", "append", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/network_link_inbound"
                }
            },
            "datalogs": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "delete", "append"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/datalog"
                }
            },
            "restricted_content_keys": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "delete", "append", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/restricted_content_key"
                }
            },
            "channels": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "anonymous": {
                        "permissions": ["read", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/channel"
                }
            },
            "asset_reactions": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    }

                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/asset_reaction"
                }
            },
            "asset_reactions_received": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "any_member": {
                        "permissions": ["read", "append", "subscribe"]
                    }

                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/asset_reaction"
                }
            },
            "messages": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "any_member": {
                        "permissions": ["read", "append"]
                    }

                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/message"
                }
            },
            "private_messages": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/message"
                }
            },
            "incoming_assets": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    }
                },
                "#properties": [["cache_only", "3d"]],
                "type": "array",
                "items": {
                    "$ref": "#/schemas/asset"
                }
            },
            "feed_assets": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    }
                },
                "#properties": ["cache_only:1w"],
                "type": "array",
                "items": {
                    "$ref": "#/schemas/asset"
                }
            },
            "public_assets": {
                "#accesscontrol": {
                    "member": {
                        "permissions": ["read", "update", "delete", "append", "subscribe"]
                    },
                    "anonymous": {
                        "permissions": ["read", "subscribe"]
                    }
                },
                "type": "array",
                "items": {
                    "$ref": "#/schemas/asset"
                }
            }
        },
        "title": "BYO Tube",
        "type": "object",
        "$defs": {
            "network_link": {
                "$id": "/schemas/network_link",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "links to other members who you have a social connection with, such as friend, colleague, family, etc.",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the network link was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "member_id": {
                        "description": "The UUID of the other member",
                        "type": "string",
                        "format": "uuid"
                    },
                    "relation": {
                        "#properties": ["counter"],
                        "description": "What relation you have with the other member",
                        "type": "string"
                    },
                    "annotations": {
                        "description": "annotations for the network link, for example if a ByoTuber has multiple channels then the specific channel that you want to follow",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "last_health_api_success": {
                        "description": "The last time the health API of the remote pod was successfully called",
                        "type": "number"
                    }
                },
                "required": ["created_timestamp", "member_id", "relation"]
            },
            "network_invite": {
                "$id": "/schemas/network_invite",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "An invite we received to network with another member",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the network invite was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "member_id": {
                        "description": "The UUID of the other member",
                        "type": "string",
                        "format": "uuid"
                    },
                    "relation": {
                        "#properties": ["counter"],
                        "description": "The relation the other member claims to have with you",
                        "type": "string"
                    },
                    "text": {
                        "description": "The text of the invitation provded by the other member",
                        "type": "string"
                    },
                    "claims": {
                        "description": "list of claims for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    }
                },
                "required": ["created_timestamp", "member_id", "relation"]
            },
            "network_link_inbound": {
                "$id": "/schemas/network_inbound",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "The relation another member has with you",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the network relation was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "member_id": {
                        "description": "The UUID of the other member",
                        "type": "string",
                        "format": "uuid"
                    },
                    "relation": {
                        "#properties": ["counter"],
                        "description": "The relation the other member has with you",
                        "type": "string"
                    },
                    "claims": {
                        "description": "list of claims for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    }
                },
                "required": ["created_timestamp", "member_id", "relation"]
            },
            "asset_reaction": {
                "$id": "/schemas/asset_reaction",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "Reactions received by the member to assets of the member",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the reaction was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "member_id": {
                        "#properties": ["index", "counter"],
                        "description": "The UUID of the member that reacted to our asset",
                        "type": "string",
                        "format":  "uuid"
                    },
                    "asset_id": {
                        "#properties": ["index", "counter"],
                        "description": "The UUID of our asset",
                        "type": "string",
                        "format":  "uuid"
                    },
                    "asset_url": {
                        "description": "Playback URL of the asset",
                        "type": "string",
                        "format": "uri"
                    },
                    "asset_class": {
                        "#properties": ["index", "counter"],
                        "description": "The UUID of our asset",
                        "type": "string",
                        "format":  "uuid"
                    },
                    "relation": {
                        "#properties": ["index", "counter"],
                        "description": "What relation the other member has with our asset, for example liked",
                        "type": "string"
                    },
                    "bookmark": {
                        "description": "Bookmark for the asset where to resume consumption of the asset, for example, seconds in a video or page in a book",
                        "type": "string"
                    },
                    "keywords": {
                        "description": "comma-separated list of keywords",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "annotations": {
                        "description": "annotations for the asset, things like 'genre:action' or 'city:San Francisco'",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "description": "categories for the asset, things like 'Education' or 'Comedy",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "list_name": {
                        "description": "The list that the member puts the asset in, for example, the list of assets about beekeeping",
                        "type": "string"
                    },
                    "claims": {
                        "description": "list of claims for the reaction",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    }
                },
                "required": ["created_timestamp", "member_id", "asset_id", "relation"]
            },
            "message": {
                "$id": "/schemas/message",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "A message sent to another member or a comment under a video",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the message was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "message_id": {
                        "description": "The UUID of the message",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["primary_key", "index", "counter"]
                    },
                    "sender_id": {
                        "description": "The UUID of the member that sent the message",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["index"]
                    },
                    "creator": {
                        "description": "creator of the message",
                        "type": "string",
                        "#properties": ["index"]
                    },
                    "creator_thumbnail": {
                        "description": "URL for the creator's thumbnail",
                        "type": "string",
                        "format": "iri"
                    },
                    "thread_id": {
                        "description": "The UUID of the thread that the message belongs to",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["index"]
                    },
                    "in_response_to_id": {
                        "description": "The UUID of the message that this message is a response to",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["index"]
                    },
                    "subject": {
                        "description": "The subject of the message",
                        "type": "string",
                        "#properties": ["index"]
                    },
                    "contents": {
                        "description": "The contents of the message",
                        "type": "string"
                    },
                    "claims": {
                        "description": "list of claims for the message",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    }
                },
                "required": ["created_timestamp", "message_id", "sender_id", "contents"]
            },
            "restricted_content_key": {
                "$id": "/schemas/restricted_content_key",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "keys used to manage access to restricted content",
                "type": "object",
                "properties": {
                    "key_id": {
                        "description": "identifier for the key",
                        "type": "integer"
                    },
                    "key": {
                        "description": "key used to create content tokens",
                        "type": "string"
                    },
                    "not_before": {
                        "description": "time before which the key is not valid",
                        "type": "string",
                        "format": "date-time"
                    },
                    "not_after": {
                        "description": "time after which the key is not valid",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "datalog": {
                "$id": "/schemas/datalog",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "log entries for the membership of the service",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the log entry was created",
                        "format": "date-time",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "remote_addr": {
                        "description": "The remote IP address performing the request",
                        "format": "ipv4",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "remote_id": {
                        "description": "The ID of the client originating the log entry",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "remote_id_type": {
                        "description": "The type of ID used to authenticate, ie. member, service or account",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "origin_member_id": {
                        "description": "The UUID of the member that originated the recurise query",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["index", "counter"]
                    },
                    "origin_timestamp": {
                        "description": "The time the query was created by the origin member of the recursive query",
                        "format": "date-time",
                        "type": "string"
                    },
                    "query_id": {
                        "description": "Unique identifier for queries so pods can drop duplicate recursive queries",
                        "type": "string",
                        "format": "uuid"
                    },
                    "origin_signature": {
                        "description": "base64 encoded signature of a recursive query",
                        "type": "string"
                    },
                    "signature_format_version": {
                        "description": "The version of the signature format used",
                        "type": "number"
                    },
                    "operation": {
                        "description": "What operation that was requested by the client",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "object": {
                        "description": "name of the object in the Data API query",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "query_filters": {
                        "description": "the filters specified in the Data API query",
                        "type": "string"
                    },
                    "query_depth": {
                        "description": "the depth specified the Data API query",
                        "type": "integer",
                        "#properties": ["index", "counter"]
                    },
                    "query_relations": {
                        "description": "the relations specified in the Data API query",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "query_remote_member_id": {
                        "description": "The member that was specified in the append request to proxy to",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["index", "counter"]
                    },
                    "source": {
                        "description": "The source of the log entry, ie. the client, a Data API query, etc.",
                        "type": "string",
                        "#properties": ["index", "counter"]
                    },
                    "message": {
                        "description": "Additional information about the request",
                        "type": "string"
                    }
                },
                "required": ["created_timestamp", "remote_addr", "operation", "object"]
            },
            "video_chapter": {
                "$id": "/schemas/video-chapter",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "type": "object",
                "description": "A chapter in a video",
                "required": ["chapter_id", "start", "end"],
                "properties": {
                    "chapter_id": {
                        "description": "The UUID of the video chapter",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["primary_key", "index", "counter"]
                    },
                    "start": {
                        "description": "The start of the chapter, as an offset in seconds from the start of the video",
                        "type": "number"
                    },
                    "end": {
                        "description": "The start of the chapter, as an offset in seconds from the start of the video",
                        "type": "number"
                    },
                    "title": {
                        "description": "The title of the chapter",
                        "type": "string"
                    }
                }
            },
            "video_thumbnail": {
                "$id": "/schemas/video-thumbnail",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "type": "object",
                "description": "A chapter in a video",
                "required": ["thumbnail_id", "url", "width", "height"],
                "properties": {
                    "thumbnail_id": {
                        "description": "The UUID of the video thumbnail",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["primary_key", "index", "counter"]
                    },
                    "url": {
                        "description": "The URL of the thumbnail",
                        "type": "string",
                        "format": "uri"
                    },
                    "width": {
                        "description": "The width of the thumbnail",
                        "type": "number"
                    },
                    "height": {
                        "description": "The height of the thumbnail",
                        "type": "number"
                    },
                    "size": {
                        "description": "a textual description of the resolution of the thumbnail, ie. '640x480' or '4k'",
                        "type": "string"
                    },
                    "preference": {
                        "description": "The preference of the thumbnail, ie. 'default', 'high', 'medium', 'low'",
                        "type": "string"
                    },
                    "youtube_url": {
                        "description": "The URL of the thumbnail on YouTube",
                        "type": "string",
                        "format": "uri"
                    },
                    "display_hint": {
                        "description": "the type of display this thumbnail was created for",
                        "type": "string"
                    }
                }
            },
            "claim": {
                "$id": "/schemas/claim",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "type": "object",
                "description": "A claim signed by a party.",
                "required": [
                    "claim_id", "issuer_id", "issuer_type",  "keyfield", "keyfield_id",
                    "object_fields", "requester_id", "requester_type",
                    "signature", "signature_timestamp", "signature_format_version",
                    "signature_url", "renewal_url", "confirmation_url",
                    "cert_fingerprint", "cert_expiration"],
                "properties": {
                    "claim_id": {
                        "description": "The UUID of the claim, unique to the signer of the claim",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["primary_key", "index", "counter"]
                    },
                    "claims": {
                        "description": "The claims that are validated by the issuer",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "issuer_id": {
                        "description": "The UUID of the claim issuer",
                        "type": "string",
                        "format": "uuid"
                    },
                    "issuer_type": {
                        "description": "what type of entity issued this claim",
                        "type": "string",
                        "enum": ["member", "service", "app", "network"]
                    },
                    "object_type": {
                        "description": "The name of the array storing the object of the claim, ie. 'public_assets' and not 'asset'. The array must store objects that have a data property 'asset_id'",
                        "type": "string"
                    },
                    "keyfield": {
                        "#properties": ["index"],
                        "description": "name of the field used to identify the object, ie. 'asset_id'. The field must be of type 'UUID'",
                        "type": "string"
                    },
                    "keyfield_id": {
                        "#properties": ["index"],
                        "description": "The UUID of the keyfield of the claim",
                        "type": "string",
                        "format": "uuid"
                    },
                    "object_fields": {
                        "description": "The fields covered by the signature of the object with ID 'object_id' stored in the array 'object_type'",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "requester_id": {
                        "description": "The UUID of the entity that requested the claim to be signed by the issuer",
                        "type": "string",
                        "format": "uuid"
                    },
                    "requester_type": {
                        "description": "what type of entity requested this claim to be signed by the issuer",
                        "type": "string",
                        "enum": ["member", "service", "app", "network"]
                    },
                    "signature": {
                        "description": "base64-encoding signature for the values for the 'object_fields' of the object with uuid 'object_id' of type 'object_class'",
                        "type": "string"
                    },
                    "signature_timestamp": {
                        "description": "Date & time for when the signature was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "signature_format_version": {
                        "description": "The version of the signature format used. Each version defines the hashing algorithm and how to format the data to be signed. The formats are defined in byoda-python/byoda/datamodel/claim.py",
                        "type": "number"
                    },
                    "signature_url": {
                        "description": "URL to visit to get additional info about the signature",
                        "type": "string",
                        "format": "uri"
                    },
                    "renewal_url": {
                        "description": "URL to request new signature of the asset",
                        "type": "string",
                        "format": "uri"
                    },
                    "confirmation_url": {
                        "description": "URL of API to call to confirm the signature has not been revoked",
                        "type": "string",
                        "format": "url"
                    },
                    "cert_fingerprint": {
                        "description": "the SHA2-256 fingerprint of the certificate used to sign the claim",
                        "type": "string"
                    },
                    "cert_expiration": {
                        "description": "the timestamp when the cert used to create the signature expires",
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "asset": {
                "$id": "/schemas/asset",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "an asset like a tweet, a message, a video, etc.",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the asset was added to the pod",
                        "format": "date-time",
                        "type": "string"
                    },
                    "asset_id": {
                        "description": "The UUID of the asset",
                        "type": "string",
                        "format": "uuid",
                        "#properties": ["primary_key", "index", "counter"]
                    },
                    "asset_type": {
                        "description": "type of asset, ie. a tweet, a message, a video, etc.",
                        "type": "string"
                    },
                    "asset_url": {
                        "description": "Location of the asset",
                        "type": "string",
                        "format": "uri"
                    },
                    "asset_merkle_root_hash": {
                        "description": "the base64-encoded merkle root hash of the asset. The full hash tree can be downloaded by taking the asset_url and replace the filename in that url with 'merkle-tree.db'",
                        "type": "string"
                    },
                    "video_thumbnails": {
                        "description": "list of thumbnails for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/video_thumbnail"
                        }
                    },
                    "video_chapters": {
                        "description": "list of video chapters for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/video_chapter"
                        }
                    },
                    "locale": {
                        "description": "locale for the metadata, ie. en_US",
                        "type": "string"
                    },
                    "creator": {
                        "description": "creator of the asset",
                        "type": "string",
                        "#properties": ["index"]
                    },
                    "creator_thumbnail": {
                        "description": "URL for the creator's thumbnail",
                        "type": "string",
                        "format": "iri"
                    },
                    "published_timestamp": {
                        "description": "date-time of first publication of the content",
                        "type": "string",
                        "format": "date-time"
                    },
                    "content_warnings": {
                        "description": "list of terms with potential triggers, such as violence, or cursing",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "claims": {
                        "description": "list of claims for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    },
                    "copyright_years": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "publisher": {
                        "#properties": ["index", "counter"],
                        "description": "the publisher of the asset",
                        "type": "string"
                    },
                    "publisher_asset_id": {
                        "description": "Identifier of the asset set by the publisher",
                        "type": "string",
                        "#properties": ["index"]
                    },
                    "title": {
                        "description": "title of the asset",
                        "type": "string"
                    },
                    "subject": {
                        "description": "a brief description of the asset",
                        "type": "string"
                    },
                    "contents": {
                        "description": "text for the asset",
                        "type": "string"
                    },
                    "keywords": {
                        "description": "comma-separated list of keywords",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "annotations": {
                        "description": "annotations for the asset, things like 'genre:action' or 'city:San Francisco'",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "categories": {
                        "description": "categories for the asset, things like 'Education' or 'Comedy",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "duration": {
                        "description": "the duration of the video",
                        "type": "number"
                    },
                    "channel_id": {
                        "description": "UUID of the channel, if any, that the asset was posted to",
                        "type": "string",
                        "format": "uuid"
                    },
                    "ingest_status": {
                        "description": "status of the ingest process",
                        "type": "string"
                    },
                    "screen_orientation_horizontal": {
                        "description": "Whether content is optimized for consumption on a screen with horizontal orietation",
                        "type": "boolean"
                    }
                },
                "required": ["created_timestamp", "asset_id", "asset_type"]
            },
            "channel": {
                "$id": "/schemas/channel",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "a Tube channel, enabling creators to group videos under different channels",
                "type": "object",
                "properties": {
                    "created_timestamp": {
                        "description": "time the channel was created",
                        "format": "date-time",
                        "type": "string"
                    },
                    "channel_id": {
                        "description": "The uuid of the channel",
                        "type": "string",
                        "format": "uuid"
                    },
                    "creator": {
                        "description": "creator of the asset",
                        "type": "string",
                        "#properties": ["index"]
                    },
                    "description": {
                        "description": "information about the channel",
                        "type": "string"
                    },
                    "keywords": {
                        "description": "keywords that apply to all the videos of the channel",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "is_family_safe": {
                        "description": "Whether the channel is family safe",
                        "type": "boolean"
                    },
                    "available_country_codes": {
                        "description": "list of country codes where the channel is available",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "channel_thumbnails": {
                        "description": "URL for the channel's thumbnail",
                        "type": "array",
                        "items": {
                            "$ref": "#/schemas/video_thumbnail"
                        }
                    },
                    "banners": {
                        "description": "Banners for the channel",
                        "type": "array",
                        "items": {
                            "$ref": "#/schemas/video_thumbnail"
                        }
                    },
                    "external_urls": {
                        "description": "links to external sites",
                        "type": "array",
                        "items": {
                            "$ref": "#/schemas/external_link"
                        }
                    },
                    "claims": {
                        "description": "list of claims for the asset",
                        "type": "array",
                        "items": {
                            "$ref": "/schemas/claim"
                        }
                    },
                    "name": {
                        "description": "DEPRECATED: use 'creator'",
                        "type": "string",
                        "#obsolete": true
                    },
                    "creator_thumbnail": {
                        "description": "DEPRECATED: use 'creator_thumbnails'",
                        "type": "string",
                        "format": "iri",
                        "#obsolete": true
                    },
                    "channel_thumbnail_url": {
                        "description": "DEPRECATED: use 'channel_thumbnails'",
                        "type": "string",
                        "format": "uri",
                        "#obsolete": true
                    },
                    "channel_banner_url": {
                        "description": "DEPRECATED: use 'channel_banners'",
                        "type": "string",
                        "format": "uri",
                        "#obsolete": true
                    }
                }
            },
            "external_link": {
                "$id": "/schemas/external_links",
                "$schema": "https://json-schema.org/draft/2020-12/schema#",
                "description": "links to external sites",
                "type": "object",
                "properties": {
                    "priority": {
                        "description": "priority of the link, informs in what order links should be presented",
                        "type": "integer"
                    },
                    "name": {
                        "description": "name of the link",
                        "type": "string"
                    },
                    "url": {
                        "description": "URL of the link",
                        "type": "string",
                        "format": "uri"
                    }
                }
            }
        }
    },
    "name": "BYO.Tube",
    "owner": "Steven Hessing",
    "max_query_depth": 5,
    "service_id": 16384,
    "signatures": {},
    "supportemail": "support@byo.tube",
    "version": 1,
    "website": "https://byo.tube/",
    "cors_origins": [
        "byo.tube",
        "www.byo.tube",
        "byoda.tube",
        "www.byoda.tube",
        "api.byoda.tube",
        "byo.host",
        "www.byo.host",
        "api.byo.host",
        "proxy.byoda.net",
        "token.byoda.net"
    ],
    "listen_relations": [
        {
            "class_name": "public_assets",
            "relations": ["follow", "subscribe"],
            "destination_class": "incoming_assets",
            "feed_class": "feed_assets"
        }
    ]
}