'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <steven@byoda.org>
:copyright  : Copyright 2021, 2022
:license    : GPLv3
'''

# flake8: noqa=E501

from __future__ import annotations

import hashlib
from uuid import UUID
from datetime import datetime
from typing import List, Dict, Optional, TypeVar

import strawberry
from strawberry.schema.config import StrawberryConfig
from strawberry.types import Info

from fastapi import HTTPException

from byoda.datamodel.member import Member as MemberClassByoda
from byoda.datamodel.member import ORIGIN_KEY as BYODA_ORIGIN_KEY
from byoda.datatypes import IdType as ByodaIdType

import logging as loggingByoda

# from byoda.datamodel.member import Member as MemberClassByoda

from byoda.requestauth.requestauth import RequestAuth as RequestAuthByoda
from byoda.requestauth.graphql_authorization import DataOperationType as DataOperationType_Byoda
from byoda.requestauth.graphql_authorization import authorize_graphql_request as authorize_graphql_request_Byoda

_LOGGER = loggingByoda.getLogger(__name__)

GenericType = TypeVar("GenericType")

async def authenticate(root, info, data_operation: DataOperationType_Byoda, depth=0):
    '''
    This is middleware called by the code generated from the Jinja
    templates implementing GraphQL support
    '''

    if not info.context or not info.context['request']:
        raise HTTPException(
            status_code=403, detail='No authentication provided'
        )

    try:
        # Checks that a client cert was provided and that the cert and
        # certchain is correct
        auth = await RequestAuthByoda.authenticate_graphql_request(
            info.context['request'], {{ service_id }}
        )
        info.context['auth'] = auth
        if auth.id_type == ByodaIdType.MEMBER:
            _LOGGER.debug(
                f'Authentication for member {auth.member_id}: '
                f'{auth.is_authenticated}'
            )
        else:
            _LOGGER.debug(
                f'Authentication for service {auth.service_id}: '
                'f{auth.is_authenticated}'
            )
    except Exception as exc:
        raise HTTPException(
            status_code=400, detail='Authentication failed'
        )

    if not auth.is_authenticated:
        raise HTTPException(
            status_code=403, detail='No authentication provided'
        )

    try:
        # Check whether the authenticated client is authorized to request
        # the data
        result = await authorize_graphql_request_Byoda(
            data_operation, {{ service_id}}, info, depth
        )
        if auth.id_type == ByodaIdType.MEMBER:
            _LOGGER.debug(
                f'Authorization for member {auth.member_id}: '
                f'{auth.is_authenticated}'
            )
        else:
            _LOGGER.debug(
                f'Authorization for service {auth.service_id}: '
                'f{auth.is_authenticated}'
            )
        return result
    except Exception as exc:
        raise HTTPException(status_code=401, detail='Not authorized')

def get_cursor_hash(data: Dict, origin: UUID, fields: List[str]) -> str:
    '''
    Helper function to generate cursors for objects based on the stringified values
    of the required fields of object
    '''

    hash_gen = hashlib.sha1()
    for field in fields:
        hash_gen.update(str(data.get(field, '')).encode('utf-8'))

    hash_gen.update(str(origin).encode('utf-8'))
    cursor = hash_gen.hexdigest()

    return cursor[0:8]


@strawberry.type
class page_info:
    end_cursor: str
    has_next_page: bool

@strawberry.input
class string_query_operator_input:
    eq: Optional[str] = None
    ne: Optional[str] = None
    vin: Optional[List[str]] = None
    nin: Optional[List[str]] = None
    regex: Optional[str] = None
    glob: Optional[str] = None

@strawberry.input
class datetime_query_operator_input:
   at: Optional[datetime] = None
   nat: Optional[datetime] = None
   after: Optional[datetime] = None
   before: Optional[datetime] = None
   atafter: Optional[datetime] = None
   atbefore: Optional[datetime] = None

@strawberry.input
class number_query_operator_input:
    eq: Optional[float] = None
    ne: Optional[float] = None
    lt: Optional[float] = None
    gt: Optional[float] = None
    elt: Optional[float] = None
    egt: Optional[float] = None

@strawberry.input
class uuid_query_operator_input:
    eq: Optional[UUID] = None
    ne: Optional[UUID] = None

{% set ns = namespace(classes_seen='') %}
{% for root_class in classes.values() %}
{%   if root_class.type != DataType.ARRAY  %}

@strawberry.type
class {{ root_class.name }}:
{%     for field in root_class.fields.values() %}
    {{ field.name }}: {% if field.name in root_class.required_fields %}{{ field.python_type }}{% else %}Optional[{{field.python_type}}]{% endif %}

{%     endfor %}{# for field in root_class.fields.values() #}

@strawberry.input
class {{ root_class.name }}_input:
{%     for field in root_class.fields.values() %}
    {{field.name }}: {{ field.python_type }}
{%     endfor %}{# for field in root_class.fields.values() #}

{# avoid classes referenced by multiple root classes from being included multiple times #}
{%     set class_name_deliminated = ':' + root_class.name + ':' %}
{%     if class_name_deliminated not in ns.classes_seen %}
@strawberry.input
class {{ root_class.name }}_input_filter:
{%       for field_name, field in root_class.fields.items() %}
{%         if field.type == DataType.STRING %}
    {{ field_name }}: Optional[string_query_operator_input] = None
{%         elif field.type == DataType.DATETIME %}
    {{ field_name }}: Optional[datetime_query_operator_input] = None
{%         elif field.type in (DataType.INTEGER, DataType.NUMBER) %}
    {{ field_name }}: Optional[number_query_operator_input] = None
{%         elif field.type == DataType.UUID %}
    {{ field_name }}: Optional[uuid_query_operator_input] = None
{%         elif field.type == DataType.ARRAY %}
    {{ field_name }}: Optional[List[str]] = None
{%         endif %}{# if field.python_type == "str" #}
{%       endfor %}{# for field_name, field in root_class.fields.items() #}
{%       set ns.classes_seen = ns.classes_seen + class_name_deliminated %}
{%     endif %} {#  if class_name_deliminated not in ns.classes_seen #}

{%   else %}{# if root_class.type != DataType.ARRAY #}

{# avoid classes referenced by multiple root classes from being included multiple times #}
{%     set class_name_deliminated = ':' + root_class.referenced_class.name + ':' %}
{%     if class_name_deliminated not in ns.classes_seen %}
@strawberry.input
class {{ root_class.referenced_class.name }}_input_filter:
{%       for field_name, field in root_class.referenced_class.fields.items() %}
{%         if field.type == DataType.STRING %}
    {{ field_name }}: Optional[string_query_operator_input] = None
{%         elif field.type == DataType.DATETIME %}
    {{ field_name }}: Optional[datetime_query_operator_input] = None
{%         elif field.type in (DataType.INTEGER, DataType.NUMBER) %}
    {{ field_name }}: Optional[number_query_operator_input] = None
{%         elif field.type == DataType.UUID %}
    {{ field_name }}: Optional[uuid_query_operator_input] = None
{%         elif field.type == DataType.ARRAY %}
    {{ field_name }}: Optional[List[str]] = None
{%         endif %}{# if field.python_type == "str" #}
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items() #}
{%       set ns.classes_seen = ns.classes_seen + class_name_deliminated %}
{%     endif %} {#  if class_name_deliminated not in ns.classes_seen #}
{%   endif %}{# if root_class.type != DataType.ARRAY #}
{% endfor %}{# root_class in classes.values() #}

{% for root_class in classes.values() %}
@strawberry.type
class {{ root_class.name }}_page:
    total_count: int
    edges: List[{{ root_class.name }}_edge]
    page_info: page_info

@strawberry.type
class {{ root_class.name }}_edge:
    cursor: str
    origin: UUID
{%     if root_class.type != DataType.ARRAY %}
    {{ root_class.name }}: {{ root_class.name }}
{% else %}{# if root_class.type != DataType.ARRAY #}
    {{ root_class.referenced_class.name }}: {{ root_class.referenced_class.name }}
{% endif %}{# if root_class.type != DataType.ARRAY #}

{% endfor %}{# for root_class in classes.values() #}

@strawberry.type
class Query:
{% for root_class in classes.values() %}
{%   if not root_class.item_id %}
    @strawberry.field
{%     if root_class.type != DataType.ARRAY %}
    async def {{ root_class.name }}_connection(self, info: Info, first: Optional[int] = None, after: Optional[str] = None, filters: Optional[{{ root_class.name }}_input_filter] = None, depth: int = 0, relations: List[str] = None) -> {{ root_class.name }}_page:
        _LOGGER.debug(f'Resolving {{ root_class.name }} object')

        result = await authenticate(self, info, DataOperationType_Byoda.READ)
        if not result:
            _LOGGER.debug(
                'Authentication status for query for data from object '
                f'{{ root_class.name }}: {result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        data = await MemberClassByoda.get_data(
            {{ service_id }}, info, depth=depth, relations=relations, filters=filters
        )


        if after:
            cursor_seen: bool = False
        else:
            cursor_seen: bool = True

        edges: List[{{ root_class.name }}_edge] = []
        total_skipped:int  = 0
        cursor = ''
        for obj in data or []:
            required_field_names = [
{%       for field_name in root_class.required_fields %}
                '{{ field_name }}',
{%       endfor %}{# for field_name in {{ root_class.required_fields }} #}
            ]

            origin = obj.pop(BYODA_ORIGIN_KEY)
            cursor = get_cursor_hash(obj, origin, required_field_names)
            if cursor_seen:
                {{ root_class.name }}_data = {{ root_class.name }}(
{%       for field_name, field in root_class.fields.items() %}
                    obj.get('{{ field_name }}'),
{%       endfor %}{# for field_name, field in root_class.fields.items() #}
                )

                edge = {{ root_class.name }}_edge(cursor=cursor, origin=origin, {{ root_class.name }}={{ root_class.name }}_data)
                edges.append(edge)
            else:
                total_skipped += 1
                if cursor == after:
                    cursor_seen = True

            if first and len(edges) == first:
                break

        has_next_page = False
        if total_skipped + len(edges) < len(data):
            has_next_page = True

        info = page_info(end_cursor=cursor, has_next_page=has_next_page)
        return {{ root_class.name }}_page(total_count=len(data), edges=edges, page_info=info)


{%     else %}{# if root_class.type != DataType.ARRAY #}
    async def {{ root_class.name }}_connection(self, info: Info, first: Optional[int] = None, after: Optional[str] = None, filters: Optional[{{ root_class.referenced_class.name }}_input_filter] = None, depth: int = 0, relations: List[str] = None) -> {{ root_class.name }}_page:
        _LOGGER.debug(
            f'Resolving {{ root_class.name }} array with depth {depth}'
        )

        if depth < 0 or depth > 1:
            raise ValueError('Recursive depth must be 0 or 1')

        result = await authenticate(self, info, DataOperationType_Byoda.READ, depth)
        if not result:
            _LOGGER.debug(
                'Authentication status for query for data from array '
                '{{ root_class.name }} of objects {{ root_class.referenced_class.name }}: '
                f'{result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        data = await MemberClassByoda.get_data(
            {{ service_id }}, info, depth=depth, relations=relations, filters=filters
        )

        if after:
            cursor_seen: bool = False
        else:
            cursor_seen: bool = True

        edges: List[{{ root_class.name }}_edge] = []
        total_skipped:int  = 0
        cursor = ''
        for obj in data or []:
            info.context['data'] = obj
            required_field_names = [
{%       for field_name in root_class.referenced_class.required_fields %}
                '{{ field_name }}',
{%       endfor %}{# for field_name in {{ root_class.referenced_class.required_fields }} #}
            ]
            origin = obj.pop(BYODA_ORIGIN_KEY)
            cursor = get_cursor_hash(obj, origin, required_field_names)
            if cursor_seen:
                {{ root_class.referenced_class.name }}_data = {{ root_class.referenced_class.name }}(
{%       for field_name, field in root_class.referenced_class.fields.items() %}
                    info.context['data'].get('{{ field_name }}'),
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items() #}
                )
                edge = {{ root_class.name }}_edge(cursor=cursor, origin=origin, {{ root_class.referenced_class.name }}={{ root_class.referenced_class.name }}_data)
                edges.append(edge)
            else:
                total_skipped += 1
                if cursor == after:
                    cursor_seen = True

            if first and len(edges) == first:
                break

        has_next_page = False
        if total_skipped + len(edges) < len(data):
            has_next_page = True

        info = page_info(end_cursor=cursor, has_next_page=has_next_page)
        return {{ root_class.name }}_page(total_count=len(data), edges=edges, page_info=info)

{%     endif %}{# if root_class.type != DataType.ARRAY #}
{%   endif %}{#  if not root_class.item_id #}
{% endfor %}{# for root_class in classes.values() #}

@strawberry.type
class Mutation:
{% for root_class in classes.values() %}
{%   if not root_class.item_id %}
{%     if root_class.type == DataType.OBJECT %}
    @strawberry.field
    async def mutate_{{ root_class.name }}(self, info: Info,
{%       for field in root_class.fields.values() %}
            {{ field.name }}: Optional[{{ field.python_type }}] = None,
{%       endfor %}{# for field in root_class.fields.values() #}
            ) -> {{ root_class.name }}:
        _LOGGER.debug('Root query for mutate_{{ root_class.name }}')

        # TODO: Can we differentiate somehow between CREATE / UPDATE / APPEND
        result = await authenticate(self, info,  DataOperationType_Byoda.UPDATE)
        if not result:
            _LOGGER.debug(
                'Authentication status for mutation for data from object '
                f'{{ root_class.name }}: {result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        info.context['data'] = {
{%       for field in root_class.fields.values()%}
            '{{ field.name }}': {{ field.name }},
{%       endfor %}
        }
        await MemberClassByoda.mutate_data({{ service_id }}, info)
        return {{ root_class.name }}(
{%       for field in root_class.fields.values()%}
            {{ field.name }},
{%       endfor %}
        )

{%     elif root_class.type == DataType.ARRAY %}{# if root_class.type == DataType.OBJECT #}
{# APIs for array processing #}
    @strawberry.field
    async def update_{{ root_class.name }}(self, info: Info, filters: {{ root_class.referenced_class.name }}_input_filter,
{%       for field_name, field in root_class.referenced_class.fields.items()%}
        {{ field_name }}: Optional[{{ field.python_type }}] = None,
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items() #}
        ) -> {{ root_class.referenced_class.name }}:
        _LOGGER.debug('Root query for update_{{ root_class.name }}')

        result = await authenticate(self, info, DataOperationType_Byoda.APPEND)
        if not result:
            _LOGGER.debug(
                'Authentication status for update for data from array '
                f'{{ root_class.name }}: {result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        info.context['data'] = {
{%       for field_name, field in root_class.referenced_class.fields.items()%}
            '{{ field_name }}': {{ field.name }},
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items()#}
        }

        item = await MemberClassByoda.update_data({{ service_id }}, filters, info)
        if not item:
            return

        return {{ root_class.referenced_class.name }}(
{%       for field_name, field in root_class.referenced_class.fields.items() %}
            item.get('{{ field_name }}'),
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items()#}
        )

    @strawberry.field
    async def append_{{ root_class.name }}(self, info: Info,
{%       for field_name, field in root_class.referenced_class.fields.items() %}
{%          if field_name in root_class.referenced_class.required_fields %}
            {{ field_name }}: {{ field.python_type }},
{%          endif %}
{%       endfor %}
{%       for field_name, field in root_class.referenced_class.fields.items() %}
{%          if field_name not in root_class.referenced_class.required_fields %}
            {{ field_name }}: Optional[{{ field.python_type }}] = None,
{%          endif %}
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items()#}
            remote_member_id: Optional[UUID] = None, depth: int = 0
            ) -> {{ root_class.referenced_class.name }}:
        _LOGGER.debug('Root query for append_{{ root_class.name }}')

        result = await authenticate(self, info, DataOperationType_Byoda.APPEND)
        if not result:
            _LOGGER.debug(
                'Authentication status for append for data to array '
                f'{{ root_class.name }}: {result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        info.context['data'] = {
{%       for field_name, field in root_class.referenced_class.fields.items() %}
            '{{ field_name }}': {{ field_name }},
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items() #}
        }
        data = await MemberClassByoda.append_data(
            {{ service_id }}, info, remote_member_id=remote_member_id, depth=depth
        )
        {{ root_class.referenced_class.name }}_data =  {{ root_class.referenced_class.name }}(
{%       for field_name, field in root_class.referenced_class.fields.items() %}
            data.get('{{ field_name }}'),
{%       endfor %}{# for field_name, field in root_class.referenced_class.fields.items() #}
        )

        return {{ root_class.referenced_class.name }}_data

    @strawberry.field
    async def delete_from_{{ root_class.name }}(self, info: Info, filters: Optional[{{ root_class.referenced_class.name }}_input_filter]) -> List[Optional[{{ root_class.referenced_class.name }}]]:
        _LOGGER.debug('Root mutate for delete_from_{{ root_class.name }}')

        if not await authenticate(self, info, DataOperationType_Byoda.DELETE):
            _LOGGER.debug(
                'Authentication status for delete for data from array '
                f'{{ root_class.name }}: {result}'
            )
            raise HTTPException(status_code=400, detail='Authentication failed')

        data = await MemberClassByoda.delete_array_data({{ service_id }}, info, filters)
        result = []
        for item in data:
            result.append(
                {{ root_class.referenced_class.name }}(
{%       for field_name, field in root_class.referenced_class.fields.items() %}
                    item.get('{{ field_name }}'),
{%       endfor %}{# for field in root_class.referenced_class.fields.values( )#}
                )
            )

        return result
{%     endif %}{# if root_class.type == DataType.OBJECT #}
{%   endif %}

{% endfor %}{# for root_class in classes.values() #}

def get_schema():
    # This is a Strawberry Schema, not byoda.Schema
    return strawberry.Schema(
        query=Query, mutation=Mutation,
        config=StrawberryConfig(auto_camel_case=False)
    )

