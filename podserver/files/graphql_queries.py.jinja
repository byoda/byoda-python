'''
Automatically generated code for GraphQL support for a Byoda service.
The code was generated by the 'generate_graphql_queries script'
using the 'podserver/files/grahphql_schema.jinja' template

:maintainer : Steven Hessing <steven@byoda.org>
:copyright  : Copyright 2021, 2022, 2023
:license    : GPLv3
'''

GRAPHQL_STATEMENTS = {}

{% set ns = namespace(classes_seen='') %}
{% for root_class in classes.values() %}
{%   if root_class.type != DataType.ARRAY  %}

QUERY_{{ root_class.name|upper }} = '''
query ($query_id: UUID!, $filters: {{ root_class.name|to_lower_camel }}InputFilter,
        $first: Int, $after: String,
        $depth: Int, $relations: [String!], $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String
        $signature_format_version: Int) {
    {{ root_class.name }}_connection(
            filters: $filters, first: $first, after: $after, depth: $depth,
            relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
            query_id: $query_id, origin_member_id: $origin_member_id,
            origin_signature: $origin_signature, signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            {{ root_class.name }} {
{%     for field in root_class.fields.values() %}
                {{ field.name }}
{%     endfor %}
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}'] = {'query': QUERY_{{ root_class.name|upper }}}

MUTATE_{{ root_class.name|upper }} = '''
mutation(
{%     for field in root_class.fields.values() %}
                    ${{ field.name }}: {{ field.graphql_type }},
{%     endfor %}
) {
    mutate_{{ root_class.name }}(
{%     for field in root_class.fields.values() %}
                    {{ field.name }}: ${{ field.name }},
{%     endfor %}
    )
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}']['mutate'] = MUTATE_{{ root_class.name|upper }}

{%   else %}{# if root_class.type != DataType.ARRAY #}

QUERY_{{ root_class.name|upper }} = '''
query ($query_id: UUID!, $filters: {{ root_class.referenced_class.name|to_lower_camel }}InputFilter,
        $first: Int, $after: String, $depth: Int, $relations: [String!],
        $remote_member_id: UUID, $timestamp: DateTime,
        $origin_member_id: UUID, $origin_signature: String, $signature_format_version: Int) {
    {{ root_class.name }}_connection(filters: $filters, first: $first, after: $after,
        depth: $depth, relations: $relations, remote_member_id: $remote_member_id, timestamp: $timestamp,
        query_id: $query_id, origin_member_id: $origin_member_id, origin_signature: $origin_signature,
        signature_format_version: $signature_format_version) {
        total_count
        edges {
            cursor
            origin
            {{ root_class.referenced_class.name }} {
{%     for field in root_class.referenced_class.fields.values() %}
                {{ field.name }}
{%     endfor %}
            }
        }
        page_info {
            end_cursor
            has_next_page
        }
    }
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}'] = {'query': QUERY_{{ root_class.name|upper }}}

APPEND_{{ root_class.name|upper }} = '''
mutation (
{%     for field in root_class.referenced_class.fields.values() %}
                    ${{ field.name }}: {{ field.graphql_type }}{% if field.name in root_class.referenced_class.required_fields %}!{% endif %},
{%     endfor %}
) {
    append_{{ root_class.name }} (
{%     for field in root_class.referenced_class.fields.values() %}
            {{ field.name }}: ${{ field.name }},
{%     endfor %}
    )
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}']['append'] = APPEND_{{ root_class.name|upper }}

UPDATE_{{ root_class.name|upper }} = '''
mutation (
    $filters: {{ root_class.referenced_class.name|to_lower_camel }}InputFilter!,
{%     for field in root_class.referenced_class.fields.values() %}
                    ${{ field.name }}: {{ field.graphql_type }},
{%     endfor %}
) {
    update_{{ root_class.name }}(
        filters: $filters,
{%     for field in root_class.referenced_class.fields.values() %}
        {{ field.name }}: ${{ field.name }},
{%     endfor %}
    )
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}']['update'] = UPDATE_{{ root_class.name|upper }}

DELETE_FROM_{{ root_class.name|upper }} = '''
mutation ($filters: {{ root_class.referenced_class.name|to_lower_camel }}InputFilter!) {
    delete_from_{{ root_class.name }}(filters: $filters)
}
'''

GRAPHQL_STATEMENTS['{{ root_class.name }}']['delete'] = DELETE_FROM_{{ root_class.name|upper }}

SUBSCRIPTION_{{ root_class.name|upper }}_UPDATES = '''
subscription (
    $filters: {{ root_class.referenced_class.name|to_lower_camel }}InputFilter) {
    {{ root_class.name }}_updates(filters: $filters) {
        action
        {{ root_class.referenced_class.name }} {
{%     for field in root_class.referenced_class.fields.values() %}
            {{ field.name }}
{%     endfor %}
        }
    }
}
'''
GRAPHQL_STATEMENTS['{{ root_class.name }}']['updates'] = SUBSCRIPTION_{{ root_class.name|upper }}_UPDATES

SUBSCRIPTION_{{ root_class.name|upper }}_COUNT = '''
subscription {
    {{ root_class.name }}_count() {
        count
    }
}
'''
GRAPHQL_STATEMENTS['{{ root_class.name }}']['count'] = SUBSCRIPTION_{{ root_class.name|upper }}_COUNT

{%   endif %}{# if root_class.type != DataType.ARRAY #}
{% endfor %}{# for root_class in classes.values() #}
