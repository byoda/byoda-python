{% if subdomain == 'accounts' %}
    upstream app_{{ custom_domain|replace('.', '_')|replace('-', '_') }} {
        zone app_{{ custom_domain|replace('.', '_')|replace('-', '_') }} 32k;
        server {{ custom_domain }}:{{ port }};
        keepalive 1024;
    }

    acme_client {{ custom_domain|replace('.', '_')|replace('-', '_') }} https://acme-v02.api.letsencrypt.org/directory;

    server {
        listen 80;
        server_name {{ custom_domain }};

        acme {{ custom_domain|replace('.', '_')|replace('-', '_') }};
        ssl_certificate $acme_cert_{{ custom_domain|replace('.', '_')|replace('-', '_') }};
        ssl_certificate_key $acme_cert_key_{{ custom_domain|replace('.', '_')|replace('-', '_') }};

        location /robots.txt {
            allow 127.0.0.1/32;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            allow 47.143.206.108;         # Steven - Frontier DSL
        }
        location / {
            return 444;
        }
    }

{% endif %}

server {
{% if subdomain == 'accounts' and not shared_webserver %}
    listen       443 ssl backlog=16384 fastopen=4096 deferred reuseport default_server;
{% else %}
    listen       443 ssl;
{% endif %}

    http2 on;

{% if subdomain == 'accounts' and custom_domain %}
    server_name  {{ identifier }}.{{ subdomain }}.{{ network }} {{ custom_domain }};

    ssl_certificate $acme_cert_{{ custom_domain|replace('.', '_')|replace('-', '_') }};
    ssl_certificate_key $acme_cert_key_{{ custom_domain|replace('.', '_')|replace('-', '_') }};

    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_ocsp_cache shared:OCSP:100k;

{% else %}
    server_name  {{ identifier }}.{{ subdomain }}.{{ network }};

    # byoda.util.secrets.Secret.save_tmp_private_key() writes unencrypted private key to /tmp
    ssl_certificate_key {{ key_filepath }};
    ssl_certificate {{ cert_filepath }};
{% endif %}

    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_verify_client
    ssl_verify_client off;

{% if subdomain == 'accounts' %}
    location / {
        status_zone wwwroot;
        root   /var/www/wwwroot/;
        set $cloud_path '/var/www/wwwroot/';
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
    }

    location /docs {
        status_zone openapi_docs;
        set $cors "0";
        satisfy any;
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';
    }

    location /redoc {
        status_zone openapi_docs;
        set $cors "0";
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';
    }

    location /openapi.json {
        status_zone openapi_docs;
        set $cors "0";
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';
    }

    location /console {
        allow 127.0.0.1/32;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow 47.143.206.108;         # Steven - Frontier DSL
        deny all;

        alias /usr/share/angie-console-light/html;
        index index.html;

        location /console/api/ {
            api /status/;
        }
    }

    location /status/ {
        allow 127.0.0.1/32;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow 47.143.206.108;         # Steven - Frontier DSL
        deny all;
        api /status/;
    }

    # OpenTelemetry prometheus exporter
    location /metrics {
        allow 127.0.0.1/32;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        set $cors "0";
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';
    }


{% else %}
    location = /member-cert.pem {
        alias {{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-cert.pem;
    }

    location = /member-data-cert.pem {
        alias {{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-data-cert.pem;
    }

{% endif %}

    location /api/ {
        status_zone api_browser_2_pod_{{ subdomain }};
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';

        proxy_set_header Host $http_host;
        proxy_set_header Early-Data $ssl_early_data;

        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header X-Client-SSL-Issuing-CA $ssl_client_i_dn;
        proxy_set_header X-Client-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-Client-SSL-Verify $ssl_client_verify;
        proxy_set_header X-Client-SSL-Cert $ssl_client_escaped_cert;
    }

    location /ws-api/ {
        status_zone ws-api_browser_2_pod_{{ subdomain }};
        proxy_pass http://{{ hostname }}:{{ port }}/api/;
        set $cloud_path 'http://{{ hostname }}:{{ port }}/api/';

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        proxy_set_header Host $host;
        proxy_set_header Early-Data $ssl_early_data;

        proxy_read_timeout 3660;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header X-Client-SSL-Issuing-CA $ssl_client_i_dn;
        proxy_set_header X-Client-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-Client-SSL-Verify $ssl_client_verify;
        proxy_set_header X-Client-SSL-Cert $ssl_client_escaped_cert;
    }
}


# Server listens on port 444 for traffic coming from other pods. These
# connections will use M-TLS authentication

server {
{% if subdomain == 'accounts' and not shared_webserver %}
    listen       444 ssl backlog=16384 fastopen=4096 deferred reuseport default_server;
{% else %}
    listen       444 ssl;
{% endif %}

    http2 on;

    server_name  {{ identifier }}.{{ subdomain }}.{{ network }};

    # byoda.util.secrets.Secret.save_tmp_private_key() writes unencrypted private key to /tmp
    ssl_certificate_key {{ key_filepath }};
    ssl_certificate {{ cert_filepath }};

    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_verify_client
    ssl_verify_client on;

    ssl_verify_depth 5;

{% if subdomain == 'accounts' %}
    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_client_certificate
    ssl_client_certificate {{ root_dir }}/network-{{ network }}/network-{{ network }}-root-ca-cert.pem;

    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_trusted_certificate
    # ssl_trusted_certificate {{ root_dir }}/network-{{ network }}/network-{{ network }}-root-ca-cert.pem;
{% else %}
    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_client_certificate
    ssl_client_certificate {{ root_dir }}/network-{{ network }}/services/service-{{ service_id }}/network-{{ network }}-service-{{ service_id }}-ca-certchain.pem;

    # http://angie.org/en/docs/http/ngx_http_ssl_module.html#ssl_trusted_certificate
    # ssl_trusted_certificate {{ root_dir }}/network-{{ network }}/services/service-{{ service_id }}/network-{{ network }}-service-{{ service_id }}-ca-cert.pem;
{% endif %}

    location = /member-cert.pem {
        alias {{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-cert.pem;
        set $cloud_path '{{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-cert.pem';
    }

    location = /member-data-cert.pem {
        alias {{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-data-cert.pem;
        set $cloud_path '{{ root_dir }}/network-{{ network }}/account-pod/service-{{ service_id }}/network-{{ network }}-member-{{ service_id }}-data-cert.pem';
    }

    location /ws-api/ {
        status_zone ws-api_pod_2_pod_{{ subdomain }};
        proxy_pass http://{{ hostname }}:{{ port }}/api/;
        set $cloud_path 'http://{{ hostname }}:{{ port }}/api/';

        proxy_set_header Early-Data $ssl_early_data;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;

        proxy_read_timeout 3660;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header X-Client-SSL-Issuing-CA $ssl_client_i_dn;
        proxy_set_header X-Client-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-Client-SSL-Verify $ssl_client_verify;
        proxy_set_header X-Client-SSL-Cert $ssl_client_escaped_cert;
    }
    location /api/ {
        status_zone api_pod_2_pod_{{ subdomain }};
        proxy_pass http://{{ hostname }}:{{ port }};
        set $cloud_path 'http://{{ hostname }}:{{ port }}';

        proxy_set_header Host $http_host;
        proxy_set_header Early-Data $ssl_early_data;

        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header X-Client-SSL-Issuing-CA $ssl_client_i_dn;
        proxy_set_header X-Client-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-Client-SSL-Verify $ssl_client_verify;
        proxy_set_header X-Client-SSL-Cert $ssl_client_escaped_cert;
    }
}
