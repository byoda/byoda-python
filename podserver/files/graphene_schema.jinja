'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <stevenhessing@live.com>
:copyright  : Copyright 2021
:license    : GPLv3
'''

import logging

from graphene import ObjectType, String, Schema, Field

from byoda.requestauth import RequestAuth

_LOGGER = logging.getLogger(__name__)

{% for class_name, properties in classes.items()|reverse %}

class {{ class_name|title }}(ObjectType):
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties %}
{%       if field_properties['type'] not in ('object', 'array') %}
{%         include 'graphene_schema_scalar.jinja' %}
{%       elif field_properties['type'] == 'object' %}
    {{ field }} = Field({{ field|title }}, name=String(required=True))
{%       endif %}
{%     endif %}
{%   endfor %}

    @staticmethod
    def authenticate(info):
        if not info.context or not info.context['request']:
            raise ValueError('Client did not authenticate itself')

        try:
            auth = RequestAuth.authenticate_request(info.context['request'])
            if not auth.is_authenticated:
                raise ValueError('Authentication failed')
        except Exception:
            return None

        return auth

{# create resolvers for the non-object properties of the class#}
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties and not field.startswith('#') and field_properties['type'] != 'array' %}
    def resolve_{{field}}(root, info, name=None):
        _LOGGER.debug('Resolving {{field}}')
        auth = Query.authenticate(info)
        return f'{{field}} {name}'

{%     endif %}
{%   endfor %}
{% endfor %}

def get_schema():
    return Schema(query=Query)

