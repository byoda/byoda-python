'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <stevenhessing@live.com>
:copyright  : Copyright 2021
:license    : GPLv3
'''

import logging

from graphene import ObjectType, String, Schema, Field

from byoda.datamodel import Member

from byoda.requestauth import RequestAuth, authorize_graphql_request

_LOGGER = logging.getLogger(__name__)

{% for class_name, properties in classes.items()|reverse %}

class {{ class_name|title }}(ObjectType):
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties %}
{%       if field_properties['type'] not in ('object', 'array') %}
{%         include 'graphene_schema_scalar.jinja' %}
{%       elif field_properties['type'] == 'object' %}
    {{ field }} = Field({{ field|title }}, name=String(required=True))
{%       endif %}
{%     endif %}
{%   endfor %}

{%   if class_name == 'Query' %}
    @staticmethod
    def authenticate(root, info):
        '''
        This is middleware called by the code generated from the Jinja
        templates implementing GraphQL support
        '''

        if not info.context or not info.context['request']:
            raise ValueError('No info to authenticate client')

        try:
            # Checks that a client cert was provided and that the cert and
            # certchain is correct
            auth = RequestAuth.authenticate_request(info.context['request'])
            if not auth.is_authenticated:
                raise ValueError('Client is not authentication')
        except Exception as exc:
            raise ValueError(f'Authentication failed: {exc}')

        try:
            # Check whether the authenticated client is authorized to request
            # the data
            authorize_graphql_request({{ service_id}}, auth, root, info)
        except Exception as exc:
            raise ValueError(f'Authorization failed: {exc}')

{%   endif%}
{# create resolvers for the non-object properties of the class #}
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties and not field.startswith('#') and field_properties['type'] != 'array' %}
    def resolve_{{field}}(root, info, name=None):
        _LOGGER.debug('Resolving {{ field }}')
{%       if class_name == 'Query' %}
        Query.authenticate(root, info)
        return Member.get_data({{ service_id }}, info.path)

{%       else %}
        return root.get('{{ field }}')

{%       endif %}
{%     endif %}
{%   endfor %}
{% endfor %}

def get_schema():
    # This is a graphene.Schema, not byoda.Schema
    return Schema(query=Query)

