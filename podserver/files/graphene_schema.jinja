'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <steven@byoda.org>
:copyright  : Copyright 2021, 2022
:license    : GPLv3
'''

# flake8: noqa=E501

from __future__ import annotations

import strawberry
from strawberry.types import Info

from byoda.datamodel.member import Member as MemberClassByoda

import logging as loggingByoda

# from byoda.datamodel.member import Member as MemberClassByoda

from byoda.requestauth import RequestAuth as RequestAuthByoda
from byoda.requestauth import authorize_graphql_request as authorize_graphql_request_Byoda


_LOGGER = loggingByoda.getLogger(__name__)

{% for class_name, properties in classes.items() %}
@strawberry.type
class {{ class_name|title }}:
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties %}
{%       if field_properties['type'] not in ('object', 'array') %}
    @strawberry.field
    def {{ field }}(self, info: Info) -> {{ type_map[field_properties['type']] }}:
        return info.context['data']['{{ field }}']

{%       elif field_properties['type'] == 'object' %}
    {{ field }} = Field({{ field|title }})
{%       endif %}{# if field_properties['type'] not in ('object', 'array') #}
{%     endif %}{# if 'type' in field_properties #}
{%   endfor %}{# for field, field_properties in properties.items() #}
{% endfor %}{# for field, field_properties in properties.items() #}

@strawberry.type
class Query:
    @staticmethod
    def authenticate(root, info):
        '''
        This is middleware called by the code generated from the Jinja
        templates implementing GraphQL support
        '''

        if not info.context or not info.context['request']:
            raise ValueError('No info to authenticate client')

        try:
            # Checks that a client cert was provided and that the cert and
            # certchain is correct
            auth = RequestAuthByoda.authenticate_request(info.context['request'])
            if not auth.is_authenticated:
                raise ValueError('Client is not authentication')
        except Exception as exc:
            raise ValueError(f'Authentication failed: {exc}')

        try:
            # Check whether the authenticated client is authorized to request
            # the data
            authorize_graphql_request_Byoda({{ service_id}}, auth, root, info)
        except Exception as exc:
            raise ValueError(f'Authorization failed: {exc}')

{% for class_name, class_properties in classes.items() %}
    @strawberry.field
    def {{ class_name }}(self, info: Info) -> {{ class_name|title }}:
        _LOGGER.debug('Resolving {{ class_name }}')
        Query.authenticate(self, info)
        info.context['data'] = MemberClassByoda.get_data({{ service_id }}, info)
        {{ class_name }} = {{ class_name|title }}()
        return {{ class_name }}

{% endfor %}{# if for class_name, class_properties in classes.items() #}
@strawberry.type
class Mutation:
    @staticmethod
    def authenticate(root, info):
        '''
        This is middleware called by the code generated from the Jinja
        templates implementing GraphQL support
        '''

        if not info.context or not info.context['request']:
            raise ValueError('No info to authenticate client')

        try:
            # Checks that a client cert was provided and that the cert and
            # certchain is correct
            auth = RequestAuthByoda.authenticate_request(info.context['request'])
            if not auth.is_authenticated:
                raise ValueError('Client is not authentication')
        except Exception as exc:
            raise ValueError(f'Authentication failed: {exc}')

        try:
            # Check whether the authenticated client is authorized to request
            # the data
            authorize_graphql_request_Byoda({{ service_id}}, auth, root, info)
        except Exception as exc:
            raise ValueError(f'Authorization failed: {exc}')

{% for class_name, properties in classes.items()|reverse %}
    @strawberry.field
    def mutate{{ class_name|title }}(self, info,
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties %}
{%       if field_properties['type'] not in ('object', 'array') %}
                {{ field }}: {{ type_map[field_properties['type']] }},
{%       endif %}{# if field_properties['type'] not in ('object', 'array') #}
{%     endif %}{# if 'type' in field_properties #}
{%   endfor %}{# for field, field_properties in properties.items() #}
            ) -> {{ class_name|title }}:
        _LOGGER.debug('Root query for mutate{{ class_name|title }}')
        Mutation.authenticate(self, info)
        info.context['data'] = {
{%   for field, field_properties in properties.items() %}
{%     if 'type' in field_properties %}
{%       if field_properties['type'] not in ('object', 'array') %}
                '{{ field }}': {{ field }},
{%       endif %}{# if field_properties['type'] not in ('object', 'array') #}
{%     endif %}{# if 'type' in field_properties #}
{%   endfor %}{# for field, field_properties in properties.items() #}
        }
        MemberClassByoda.set_data({{ service_id }}, info)
        return {{ class_name|title }}()

{% endfor %}{# for class_name, properties in classes.items()|reverse #}

def get_schema():
    # This is a graphene.Schema, not byoda.Schema
    return strawberry.Schema(query=Query, mutation=Mutation)

