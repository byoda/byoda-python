'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <stevenhessing@live.com>
:copyright  : Copyright 2021
:license    : GPLv3
'''

import logging

from graphene import ObjectType, String, Schema

from byoda.requestauth import RequestAuth

_LOGGER = logging.getLogger(__name__)


class Query{{service_id}}(ObjectType):
{% for field, properties in schema.properties.items() %}
{%   if not field.startswith('#')  %}
{%     if properties['type'].lower() == 'string' %}
    {{field}} = String(name=String(default_value="stranger"))
{%     endif %}
{%   endif %}
{% endfor %}

    @staticmethod
    def authenticate(info):
        if not info.context or not info.context['request']:
            raise ValueError('Client did not authenticate itself')

        auth = RequestAuth.authenticate_request(info.context['request'])
        if not auth.is_authenticated:
            raise ValueError('Authentication failed')

        return auth

{% for field, properties in schema.properties.items() %}
{%   if not field.startswith('#')  %}
    def resolve_{{field}}(root, info, name):
        _LOGGER.debug('Resolving {{field}} for value %s', name)

        auth = Query{{service_id}}.authenticate(info)
        return f'{{field}} {name}'

{%   endif %}
{% endfor %}

def get_schema():
    return Schema(query=Query{{service_id}})

