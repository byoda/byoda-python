'''
Automatically generated code for GraphQL support for a Byoda servce

:maintainer : Steven Hessing <stevenhessing@live.com>
:copyright  : Copyright 2021
:license    : GPLv3
'''

import logging

from graphene import ObjectType, String, Schema

from byoda.requestauth import RequestAuth

_LOGGER = logging.getLogger(__name__)

{% set properties = schema.properties %}
{% set class_name = 'Query' + service_id %}
{% set classes = {class_name: [properties]} %}

{% for class_name, properties in classes %}
class {{ class_name }}(ObjectType):
{%   for field, field_properties in properties.items() %}
{%     if field_properties['type'] == "object" %}
{%       set object_class = dict() %}
{{        object_class[field] = field_properties }}
{{       classes.add(object_class )
{%     elif field_properties not in ('object', 'array') %}
{%         include 'graphene_schema_scalar.jinja2' %}
{%     endif %}
{%   endfor %}

    @staticmethod
    def authenticate(info):
        if not info.context or not info.context['request']:
            raise ValueError('Client did not authenticate itself')

        auth = RequestAuth.authenticate_request(info.context['request'])
        if not auth.is_authenticated:
            raise ValueError('Authentication failed')

        return auth

{%   for field, properties in schema.properties.items() %}
{%     if not field.startswith('#') and not field_properties['type'] in ('object', 'array')  %}
    def resolve_{{field}}(root, info, name):
        _LOGGER.debug('Resolving {{field}} for value %s', name)

            auth = Query{{service_id}}.authenticate(info)
            return f'{{field}} {name}'

{%     endif %}
{%   endfor %}
{% endfor %}

def get_schema():
    return Schema(query=Query{{service_id}})

