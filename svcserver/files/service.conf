server {
    listen      443 ssl;

    server_name  service.service-{{ SERVICE_ID }}.{{ network }};

    ssl_certificate {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }}/network-{{ network }}-service-{{ SERVICE_ID }}-cert.pem;
    ssl_certificate_key /var/tmp/service-{{ SERVICE_ID }}.key;

    ssl_verify_client optional;

    ssl_verify_depth 5;

    # CA file has to contain certchain of intermediate CA to root CA, including root CA cert(!). This ca certchain
    # file is manually created: https://stackoverflow.com/questions/47585757/openssl-error-unable-to-get-local-issuer-certificate
    ssl_client_certificate {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }}/network-{{ network }}-service-{{ SERVICE_ID }}-ca-certchain.pem;

    ssl_stapling off;

    location / {
        root  /var/www/wwwroot/service-{{ SERVICE_ID }}.{{ network }}/;
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
    }

    location /member-certs {
        root {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }};
    }

    location /network-{{ network }}-service-{{ SERVICE_ID }}-ca-certchain.pem {
        alias {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }}/network-{{ network }}-service-{{ SERVICE_ID }}-ca-certchain.pem;
    }

    location /network-{{ network }}-service-{{ SERVICE_ID }}-data-cert.pem {
        alias {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }}/network-{{ network }}-service-{{ SERVICE_ID }}-data-cert.pem;
    }

    location ~ ^/member-data-certs/network-byoda\.net\-(?<memberid>[a-zA-Z0-9\-]*)\-data\-cert.pem$ {
        alias {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/account-pod/service-$memberid/network-{{ network }}-member-$memberid-data-cert.pem;
    }

    location /service-contract.json {
        alias {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/services/service-{{ SERVICE_ID }}/service-contract.json;
        if ($http_origin ~* ^https:\/\/service\.service-{{ SERVICE_ID }}\.byoda\.net(:443)?$) {
            set $cors "1";
        }

{% for cors_re in cors_rules %}
        if ($http_origin ~* {{ cors_re }}) {
            set $cors "1";
        }
{% endfor %}

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}o";
        }

        # OPTIONS (pre-flight) request from allowed
        # CORS domain. return response directly
        if ($cors = "1o") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header Content-Length 0 always;
            add_header Content-Type application/json always;
            return 200;
        }

        if ($cors = "1") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header Content-Type application/json always;
         }
    }

    location /apps/ {
        root {{ BASE_DIR }}/service-{{ SERVICE_ID }}/network-{{ network }}/service-{{ SERVICE_ID }}/;

{# example CORS re: '^http:\/\/byo\.tube(:443)?$'
{% for cors_re in cors_rules %}
        if ($http_origin ~* {{ cors_re }}) {
            set $cors "1";
{% endfor %}
        }

        if ($http_origin ~* ^https:\/\/addressbook\.byoda\.org(:443)?$) {
            set $cors "1";
        }

        if ($http_origin ~* ^https:\/\/proxy.{{ network }}(:443)?$) {
            set $cors "1";
        }

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}o";
        }

        # OPTIONS (pre-flight) request from allowed
        # CORS domain. return response directly
        if ($cors = "1o") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header Content-Length 0 always;
            add_header Content-Type application/json always;
            return 200;
        }

        if ($cors = "1") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
         }
    }


    location /docs {
        set $cors "0";
        #satisfy any;
        #auth_basic "byoda";
        #auth_basic_user_file /etc/angie/htpasswd;
        #allow 47.153.143.96/32;
        proxy_pass http://127.0.0.1:8010;
    }

    location /redoc {
        set $cors "0";
        #satisfy any;
        #auth_basic "byoda";
        #auth_basic_user_file /etc/angie/htpasswd;
        #allow 47.153.143.96/32;
        proxy_pass http://127.0.0.1:8010;
    }

    location /openapi.json {
        set $cors "0";
        #satisfy any;
        #auth_basic "byoda";
        #auth_basic_user_file /etc/angie/htpasswd;
        #allow 47.153.143.96/32;
        proxy_pass http://127.0.0.1:8010;
    }


    location /api/ {
        proxy_pass http://127.0.0.1:8010;

        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header X-Client-SSL-Issuing-CA $ssl_client_i_dn;
        proxy_set_header X-Client-SSL-Subject $ssl_client_s_dn;
        proxy_set_header X-Client-SSL-Verify $ssl_client_verify;

        if ($http_origin ~* ^https:\/\/service\.service-{{ SERVICE_ID }}\.byoda\.net(:443)?$) {
            set $cors "1";
        }

        if ($http_origin ~* ^https:\/\/addressbook\.byoda\.org(:443)?$) {
            set $cors "1";
        }

        if ($http_origin ~* ^https:\/\/proxy.{{ network }}(:443)?$) {
            set $cors "1";
        }

        # OPTIONS indicates a CORS pre-flight request
        if ($request_method = 'OPTIONS') {
            set $cors "${cors}o";
        }

        # OPTIONS (pre-flight) request from allowed
        # CORS domain. return response directly
        if ($cors = "1o") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header Content-Length 0 always;
            add_header Content-Type text/plain always;
            return 200;
        }

        if ($cors = "1") {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PATCH, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Expose-Headers' 'Date' always;
            add_header 'Access-Control-Max-Age' '86400' always;
         }
    }

    location /favicon.ico {
        set $cors "0";
        root   /var/www/wwwroot/service-{{ SERVICE_ID }}.{{ network }}/;
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/angie/html;
    }
}

